
ad9833interface.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a00  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  00000a74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000193  00802000  00802000  00000a74  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a74  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000aa4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000044d9  00000000  00000000  00000b74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003574  00000000  00000000  0000504d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009ae  00000000  00000000  000085c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000118  00000000  00000000  00008f70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002bd0  00000000  00000000  00009088  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000466  00000000  00000000  0000bc58  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  0000c0be  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
   8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
   c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  10:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  14:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  18:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  1c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  20:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  24:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  28:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  2c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  30:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  34:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  38:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  3c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  40:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  44:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  48:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  4c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  50:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  54:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  58:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  5c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  60:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  64:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  68:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  6c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  70:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  74:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  78:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  7c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  80:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  84:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  88:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  8c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  90:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  94:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  98:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  9c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  a0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  a4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  a8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  ac:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  b0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  b4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  b8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  bc:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  c0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  c4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  c8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  cc:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  d0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  d4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  d8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  dc:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  e0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  e4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  e8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  ec:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  f0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  f4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  f8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  fc:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 100:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 104:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 108:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 10c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 110:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 114:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 118:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 11c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 120:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 124:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 128:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 12c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 130:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 134:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 138:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 13c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 140:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 144:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 148:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 14c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 150:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 154:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 158:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 15c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 160:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 164:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 168:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 16c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 170:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 174:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 178:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 17c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 180:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 184:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 188:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 18c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 190:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 194:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 198:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 19c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1a0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1a4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1a8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1ac:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1b0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1b4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1b8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1bc:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1c0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1c4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1c8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1cc:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1d0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1d4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1d8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1dc:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1e0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1e4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1e8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1ec:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1f0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1f4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1f8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e5       	ldi	r29, 0x5F	; 95
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60

0000020c <__do_clear_bss>:
 20c:	21 e2       	ldi	r18, 0x21	; 33
 20e:	a0 e0       	ldi	r26, 0x00	; 0
 210:	b0 e2       	ldi	r27, 0x20	; 32
 212:	01 c0       	rjmp	.+2      	; 0x216 <.do_clear_bss_start>

00000214 <.do_clear_bss_loop>:
 214:	1d 92       	st	X+, r1

00000216 <.do_clear_bss_start>:
 216:	a3 39       	cpi	r26, 0x93	; 147
 218:	b2 07       	cpc	r27, r18
 21a:	e1 f7       	brne	.-8      	; 0x214 <.do_clear_bss_loop>
 21c:	0e 94 75 02 	call	0x4ea	; 0x4ea <main>
 220:	0c 94 fe 04 	jmp	0x9fc	; 0x9fc <_exit>

00000224 <__bad_interrupt>:
 224:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000228 <writeControlRegister>:
	softwareSpiWrite(0xE000 | (pWavgen->_phaseRegister & 0x1FFF));	//Reg 2
	pWavgen->_PSELECT = true;
	writeControlRegister(pWavgen);
}

void writeControlRegister(WAVGEN_t *pWavgen){
 228:	fc 01       	movw	r30, r24
	pWavgen->_controlRegister = 0x0000 |
 22a:	87 81       	ldd	r24, Z+7	; 0x07
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	9c 01       	movw	r18, r24
 230:	22 0f       	add	r18, r18
 232:	33 1f       	adc	r19, r19
 234:	96 81       	ldd	r25, Z+6	; 0x06
 236:	89 2f       	mov	r24, r25
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	88 0f       	add	r24, r24
 23c:	99 1f       	adc	r25, r25
 23e:	88 0f       	add	r24, r24
 240:	99 1f       	adc	r25, r25
 242:	88 0f       	add	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	82 2b       	or	r24, r18
 248:	93 2b       	or	r25, r19
 24a:	25 81       	ldd	r18, Z+5	; 0x05
 24c:	40 e2       	ldi	r20, 0x20	; 32
 24e:	24 9f       	mul	r18, r20
 250:	90 01       	movw	r18, r0
 252:	11 24       	eor	r1, r1
 254:	82 2b       	or	r24, r18
 256:	93 2b       	or	r25, r19
 258:	22 85       	ldd	r18, Z+10	; 0x0a
 25a:	40 e4       	ldi	r20, 0x40	; 64
 25c:	24 9f       	mul	r18, r20
 25e:	90 01       	movw	r18, r0
 260:	11 24       	eor	r1, r1
 262:	82 2b       	or	r24, r18
 264:	93 2b       	or	r25, r19
 266:	23 85       	ldd	r18, Z+11	; 0x0b
 268:	40 e8       	ldi	r20, 0x80	; 128
 26a:	24 9f       	mul	r18, r20
 26c:	90 01       	movw	r18, r0
 26e:	11 24       	eor	r1, r1
 270:	82 2b       	or	r24, r18
 272:	93 2b       	or	r25, r19
 274:	24 81       	ldd	r18, Z+4	; 0x04
 276:	92 2b       	or	r25, r18
 278:	21 85       	ldd	r18, Z+9	; 0x09
 27a:	30 e0       	ldi	r19, 0x00	; 0
 27c:	32 2f       	mov	r19, r18
 27e:	22 27       	eor	r18, r18
 280:	33 0f       	add	r19, r19
 282:	33 0f       	add	r19, r19
 284:	82 2b       	or	r24, r18
 286:	93 2b       	or	r25, r19
 288:	20 85       	ldd	r18, Z+8	; 0x08
 28a:	30 e0       	ldi	r19, 0x00	; 0
 28c:	32 2f       	mov	r19, r18
 28e:	22 27       	eor	r18, r18
 290:	33 0f       	add	r19, r19
 292:	33 0f       	add	r19, r19
 294:	33 0f       	add	r19, r19
 296:	82 2b       	or	r24, r18
 298:	93 2b       	or	r25, r19
 29a:	23 81       	ldd	r18, Z+3	; 0x03
 29c:	30 e0       	ldi	r19, 0x00	; 0
 29e:	32 2f       	mov	r19, r18
 2a0:	22 27       	eor	r18, r18
 2a2:	32 95       	swap	r19
 2a4:	30 7f       	andi	r19, 0xF0	; 240
 2a6:	82 2b       	or	r24, r18
 2a8:	93 2b       	or	r25, r19
 2aa:	22 81       	ldd	r18, Z+2	; 0x02
 2ac:	30 e0       	ldi	r19, 0x00	; 0
 2ae:	32 2f       	mov	r19, r18
 2b0:	22 27       	eor	r18, r18
 2b2:	32 95       	swap	r19
 2b4:	33 0f       	add	r19, r19
 2b6:	30 7e       	andi	r19, 0xE0	; 224
 2b8:	82 2b       	or	r24, r18
 2ba:	93 2b       	or	r25, r19
 2bc:	80 83       	st	Z, r24
 2be:	91 83       	std	Z+1, r25	; 0x01
	(pWavgen->_OPBITEN << 5) | (pWavgen->_SLEEP1 << 6) |
	(pWavgen->_SLEEP12 << 7) | (pWavgen->_reset << 8) |
	(pWavgen->_PSELECT << 10) |(pWavgen->_FSELECT << 11) |
	(pWavgen->_HLB << 12) | (pWavgen->_B28BIT << 13);
										
	softwareSpiWrite(pWavgen->_controlRegister);
 2c0:	0e 94 12 03 	call	0x624	; 0x624 <softwareSpiWrite>
 2c4:	08 95       	ret

000002c6 <initGenerator>:
 *  Author: Hendrik-Jan
 */ 

#include "AD9833.h"

void initGenerator(WAVGEN_t *pWavgen, uint32_t f_clk){
 2c6:	cf 92       	push	r12
 2c8:	df 92       	push	r13
 2ca:	ef 92       	push	r14
 2cc:	ff 92       	push	r15
 2ce:	cf 93       	push	r28
 2d0:	df 93       	push	r29
 2d2:	ec 01       	movw	r28, r24
 2d4:	6a 01       	movw	r12, r20
 2d6:	7b 01       	movw	r14, r22
	initSoftwareSpi();
 2d8:	0e 94 07 03 	call	0x60e	; 0x60e <initSoftwareSpi>
	pWavgen->_controlRegister = 0; 
 2dc:	18 82       	st	Y, r1
 2de:	19 82       	std	Y+1, r1	; 0x01
	pWavgen->_B28BIT = true;
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	8a 83       	std	Y+2, r24	; 0x02
	pWavgen->_HLB = false;
 2e4:	1b 82       	std	Y+3, r1	; 0x03
	pWavgen->_reset = false;
 2e6:	1c 82       	std	Y+4, r1	; 0x04
	pWavgen->_OPBITEN = false;
 2e8:	1d 82       	std	Y+5, r1	; 0x05
	pWavgen->_DIV2 = true;
 2ea:	8e 83       	std	Y+6, r24	; 0x06
	
	pWavgen->_FSELECT = false;
 2ec:	18 86       	std	Y+8, r1	; 0x08
	pWavgen->_PSELECT = false;
 2ee:	19 86       	std	Y+9, r1	; 0x09
	pWavgen->_SLEEP1 = false;
 2f0:	1a 86       	std	Y+10, r1	; 0x0a
	pWavgen->_SLEEP12 = false;
 2f2:	1b 86       	std	Y+11, r1	; 0x0b
	
	pWavgen->_freq = 1000;
 2f4:	88 ee       	ldi	r24, 0xE8	; 232
 2f6:	93 e0       	ldi	r25, 0x03	; 3
 2f8:	a0 e0       	ldi	r26, 0x00	; 0
 2fa:	b0 e0       	ldi	r27, 0x00	; 0
 2fc:	88 8b       	std	Y+16, r24	; 0x10
 2fe:	99 8b       	std	Y+17, r25	; 0x11
 300:	aa 8b       	std	Y+18, r26	; 0x12
 302:	bb 8b       	std	Y+19, r27	; 0x13
	pWavgen->_phase = 0;
 304:	1e 8a       	std	Y+22, r1	; 0x16
 306:	1f 8a       	std	Y+23, r1	; 0x17
	pWavgen->_FMCLK = f_clk;
 308:	c8 8e       	std	Y+24, r12	; 0x18
 30a:	d9 8e       	std	Y+25, r13	; 0x19
 30c:	ea 8e       	std	Y+26, r14	; 0x1a
 30e:	fb 8e       	std	Y+27, r15	; 0x1b
	
	pWavgen->_CLKratio = (double)pWavgen->_FMCLK/DDS_HORIZONTAL_RES;
 310:	c7 01       	movw	r24, r14
 312:	b6 01       	movw	r22, r12
 314:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <__floatunsisf>
 318:	20 e0       	ldi	r18, 0x00	; 0
 31a:	30 e0       	ldi	r19, 0x00	; 0
 31c:	40 e8       	ldi	r20, 0x80	; 128
 31e:	51 e3       	ldi	r21, 0x31	; 49
 320:	0e 94 60 04 	call	0x8c0	; 0x8c0 <__mulsf3>
 324:	6c 8f       	std	Y+28, r22	; 0x1c
 326:	7d 8f       	std	Y+29, r23	; 0x1d
 328:	8e 8f       	std	Y+30, r24	; 0x1e
 32a:	9f 8f       	std	Y+31, r25	; 0x1f
	writeControlRegister(pWavgen);
 32c:	ce 01       	movw	r24, r28
 32e:	0e 94 14 01 	call	0x228	; 0x228 <writeControlRegister>
}
 332:	df 91       	pop	r29
 334:	cf 91       	pop	r28
 336:	ff 90       	pop	r15
 338:	ef 90       	pop	r14
 33a:	df 90       	pop	r13
 33c:	cf 90       	pop	r12
 33e:	08 95       	ret

00000340 <setWaveform>:

void setWaveform(WAVGEN_t *pWavgen, waveforms_t waveform){
	switch(waveform){
 340:	61 30       	cpi	r22, 0x01	; 1
 342:	69 f0       	breq	.+26     	; 0x35e <setWaveform+0x1e>
 344:	18 f0       	brcs	.+6      	; 0x34c <setWaveform+0xc>
 346:	62 30       	cpi	r22, 0x02	; 2
 348:	29 f0       	breq	.+10     	; 0x354 <setWaveform+0x14>
 34a:	0d c0       	rjmp	.+26     	; 0x366 <setWaveform+0x26>
		case SINEWAVE: pWavgen->_OPBITEN = false; pWavgen->_mode = false; break;
 34c:	fc 01       	movw	r30, r24
 34e:	15 82       	std	Z+5, r1	; 0x05
 350:	17 82       	std	Z+7, r1	; 0x07
 352:	09 c0       	rjmp	.+18     	; 0x366 <setWaveform+0x26>
		case SQUAREWAVE: pWavgen->_OPBITEN = true; pWavgen->_mode = false; break;
 354:	21 e0       	ldi	r18, 0x01	; 1
 356:	fc 01       	movw	r30, r24
 358:	25 83       	std	Z+5, r18	; 0x05
 35a:	17 82       	std	Z+7, r1	; 0x07
 35c:	04 c0       	rjmp	.+8      	; 0x366 <setWaveform+0x26>
		case TRIANGLEWAVE: pWavgen->_OPBITEN = false; pWavgen->_mode = true; break;
 35e:	fc 01       	movw	r30, r24
 360:	15 82       	std	Z+5, r1	; 0x05
 362:	21 e0       	ldi	r18, 0x01	; 1
 364:	27 83       	std	Z+7, r18	; 0x07
	}
	writeControlRegister(pWavgen);
 366:	0e 94 14 01 	call	0x228	; 0x228 <writeControlRegister>
 36a:	08 95       	ret

0000036c <setFrequency>:
}

void setFrequency(WAVGEN_t *pWavgen, uint32_t frequency){
 36c:	cf 93       	push	r28
 36e:	df 93       	push	r29
 370:	ec 01       	movw	r28, r24
	if(pWavgen->_freq == frequency) return;
 372:	88 89       	ldd	r24, Y+16	; 0x10
 374:	99 89       	ldd	r25, Y+17	; 0x11
 376:	aa 89       	ldd	r26, Y+18	; 0x12
 378:	bb 89       	ldd	r27, Y+19	; 0x13
 37a:	84 17       	cp	r24, r20
 37c:	95 07       	cpc	r25, r21
 37e:	a6 07       	cpc	r26, r22
 380:	b7 07       	cpc	r27, r23
 382:	09 f4       	brne	.+2      	; 0x386 <setFrequency+0x1a>
 384:	4b c0       	rjmp	.+150    	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 386:	cb 01       	movw	r24, r22
 388:	ba 01       	movw	r22, r20
	pWavgen->_freq = frequency;
 38a:	68 8b       	std	Y+16, r22	; 0x10
 38c:	79 8b       	std	Y+17, r23	; 0x11
 38e:	8a 8b       	std	Y+18, r24	; 0x12
 390:	9b 8b       	std	Y+19, r25	; 0x13
 	pWavgen->_frequencyRegister = (uint32_t)frequency/pWavgen->_CLKratio;
 392:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <__floatunsisf>
 396:	2c 8d       	ldd	r18, Y+28	; 0x1c
 398:	3d 8d       	ldd	r19, Y+29	; 0x1d
 39a:	4e 8d       	ldd	r20, Y+30	; 0x1e
 39c:	5f 8d       	ldd	r21, Y+31	; 0x1f
 39e:	0e 94 31 03 	call	0x662	; 0x662 <__divsf3>
 3a2:	0e 94 a3 03 	call	0x746	; 0x746 <__fixunssfsi>
 3a6:	6c 87       	std	Y+12, r22	; 0x0c
 3a8:	7d 87       	std	Y+13, r23	; 0x0d
 3aa:	8e 87       	std	Y+14, r24	; 0x0e
 3ac:	9f 87       	std	Y+15, r25	; 0x0f
	 
	pWavgen->_FSELECT = true;
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	88 87       	std	Y+8, r24	; 0x08
	writeControlRegister(pWavgen);
 3b2:	ce 01       	movw	r24, r28
 3b4:	0e 94 14 01 	call	0x228	; 0x228 <writeControlRegister>
	softwareSpiWrite(0x4000 | (pWavgen->_frequencyRegister & 0x3FFF));	//Reg 1 LSB
 3b8:	8c 85       	ldd	r24, Y+12	; 0x0c
 3ba:	9d 85       	ldd	r25, Y+13	; 0x0d
 3bc:	9f 73       	andi	r25, 0x3F	; 63
 3be:	90 64       	ori	r25, 0x40	; 64
 3c0:	0e 94 12 03 	call	0x624	; 0x624 <softwareSpiWrite>
	softwareSpiWrite(0x4000 | ((pWavgen->_frequencyRegister >> 14) & 0x3FFF));	//Reg 1 MSB
 3c4:	8c 85       	ldd	r24, Y+12	; 0x0c
 3c6:	9d 85       	ldd	r25, Y+13	; 0x0d
 3c8:	ae 85       	ldd	r26, Y+14	; 0x0e
 3ca:	bf 85       	ldd	r27, Y+15	; 0x0f
 3cc:	07 2e       	mov	r0, r23
 3ce:	7e e0       	ldi	r23, 0x0E	; 14
 3d0:	b6 95       	lsr	r27
 3d2:	a7 95       	ror	r26
 3d4:	97 95       	ror	r25
 3d6:	87 95       	ror	r24
 3d8:	7a 95       	dec	r23
 3da:	d1 f7       	brne	.-12     	; 0x3d0 <setFrequency+0x64>
 3dc:	70 2d       	mov	r23, r0
 3de:	9f 73       	andi	r25, 0x3F	; 63
 3e0:	90 64       	ori	r25, 0x40	; 64
 3e2:	0e 94 12 03 	call	0x624	; 0x624 <softwareSpiWrite>
	softwareSpiWrite(0x8000 | (pWavgen->_frequencyRegister & 0x3FFF));	//Reg 2 LSB
 3e6:	8c 85       	ldd	r24, Y+12	; 0x0c
 3e8:	9d 85       	ldd	r25, Y+13	; 0x0d
 3ea:	9f 73       	andi	r25, 0x3F	; 63
 3ec:	90 68       	ori	r25, 0x80	; 128
 3ee:	0e 94 12 03 	call	0x624	; 0x624 <softwareSpiWrite>
	softwareSpiWrite(0x8000 | ((pWavgen->_frequencyRegister >> 14) & 0x3FFF));	//Reg 2 MSB
 3f2:	8c 85       	ldd	r24, Y+12	; 0x0c
 3f4:	9d 85       	ldd	r25, Y+13	; 0x0d
 3f6:	ae 85       	ldd	r26, Y+14	; 0x0e
 3f8:	bf 85       	ldd	r27, Y+15	; 0x0f
 3fa:	07 2e       	mov	r0, r23
 3fc:	7e e0       	ldi	r23, 0x0E	; 14
 3fe:	b6 95       	lsr	r27
 400:	a7 95       	ror	r26
 402:	97 95       	ror	r25
 404:	87 95       	ror	r24
 406:	7a 95       	dec	r23
 408:	d1 f7       	brne	.-12     	; 0x3fe <setFrequency+0x92>
 40a:	70 2d       	mov	r23, r0
 40c:	9f 73       	andi	r25, 0x3F	; 63
 40e:	90 68       	ori	r25, 0x80	; 128
 410:	0e 94 12 03 	call	0x624	; 0x624 <softwareSpiWrite>
	pWavgen->_FSELECT = false;
 414:	18 86       	std	Y+8, r1	; 0x08
	writeControlRegister(pWavgen);
 416:	ce 01       	movw	r24, r28
 418:	0e 94 14 01 	call	0x228	; 0x228 <writeControlRegister>
}
 41c:	df 91       	pop	r29
 41e:	cf 91       	pop	r28
 420:	08 95       	ret

00000422 <setPhaseDegrees>:

void setPhaseDegrees(WAVGEN_t *pWavgen, uint16_t phase){
 422:	1f 93       	push	r17
 424:	cf 93       	push	r28
 426:	df 93       	push	r29
	if(pWavgen->_phase == phase) return;
 428:	fc 01       	movw	r30, r24
 42a:	26 89       	ldd	r18, Z+22	; 0x16
 42c:	37 89       	ldd	r19, Z+23	; 0x17
 42e:	26 17       	cp	r18, r22
 430:	37 07       	cpc	r19, r23
 432:	09 f4       	brne	.+2      	; 0x436 <setPhaseDegrees+0x14>
 434:	45 c0       	rjmp	.+138    	; 0x4c0 <setPhaseDegrees+0x9e>
 436:	ab 01       	movw	r20, r22
 438:	ec 01       	movw	r28, r24
	pWavgen->_phase = phase;
 43a:	6e 8b       	std	Y+22, r22	; 0x16
 43c:	7f 8b       	std	Y+23, r23	; 0x17
	phase%=360;
 43e:	9b 01       	movw	r18, r22
 440:	a3 e8       	ldi	r26, 0x83	; 131
 442:	bd e2       	ldi	r27, 0x2D	; 45
 444:	0e 94 ef 04 	call	0x9de	; 0x9de <__umulhisi3>
 448:	00 24       	eor	r0, r0
 44a:	88 0f       	add	r24, r24
 44c:	99 1f       	adc	r25, r25
 44e:	00 1c       	adc	r0, r0
 450:	88 0f       	add	r24, r24
 452:	99 1f       	adc	r25, r25
 454:	00 1c       	adc	r0, r0
 456:	89 2f       	mov	r24, r25
 458:	90 2d       	mov	r25, r0
 45a:	68 e6       	ldi	r22, 0x68	; 104
 45c:	71 e0       	ldi	r23, 0x01	; 1
 45e:	86 9f       	mul	r24, r22
 460:	90 01       	movw	r18, r0
 462:	87 9f       	mul	r24, r23
 464:	30 0d       	add	r19, r0
 466:	96 9f       	mul	r25, r22
 468:	30 0d       	add	r19, r0
 46a:	11 24       	eor	r1, r1
 46c:	ca 01       	movw	r24, r20
 46e:	82 1b       	sub	r24, r18
 470:	93 0b       	sbc	r25, r19
	pWavgen->_phaseRegister = (phase==0)?(0):(uint16_t)phase/PHASEFORMULA;
 472:	71 f0       	breq	.+28     	; 0x490 <setPhaseDegrees+0x6e>
 474:	bc 01       	movw	r22, r24
 476:	80 e0       	ldi	r24, 0x00	; 0
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <__floatunsisf>
 47e:	20 e0       	ldi	r18, 0x00	; 0
 480:	30 e0       	ldi	r19, 0x00	; 0
 482:	44 eb       	ldi	r20, 0xB4	; 180
 484:	5d e3       	ldi	r21, 0x3D	; 61
 486:	0e 94 31 03 	call	0x662	; 0x662 <__divsf3>
 48a:	0e 94 a3 03 	call	0x746	; 0x746 <__fixunssfsi>
 48e:	02 c0       	rjmp	.+4      	; 0x494 <setPhaseDegrees+0x72>
 490:	60 e0       	ldi	r22, 0x00	; 0
 492:	70 e0       	ldi	r23, 0x00	; 0
 494:	6c 8b       	std	Y+20, r22	; 0x14
 496:	7d 8b       	std	Y+21, r23	; 0x15
	
	pWavgen->_PSELECT = true;
 498:	11 e0       	ldi	r17, 0x01	; 1
 49a:	19 87       	std	Y+9, r17	; 0x09
	writeControlRegister(pWavgen);
 49c:	ce 01       	movw	r24, r28
 49e:	0e 94 14 01 	call	0x228	; 0x228 <writeControlRegister>
	softwareSpiWrite(0xC000 | (pWavgen->_phaseRegister & 0x1FFF));	//Reg 1
 4a2:	8c 89       	ldd	r24, Y+20	; 0x14
 4a4:	9d 89       	ldd	r25, Y+21	; 0x15
 4a6:	9f 71       	andi	r25, 0x1F	; 31
 4a8:	90 6c       	ori	r25, 0xC0	; 192
 4aa:	0e 94 12 03 	call	0x624	; 0x624 <softwareSpiWrite>
	softwareSpiWrite(0xE000 | (pWavgen->_phaseRegister & 0x1FFF));	//Reg 2
 4ae:	8c 89       	ldd	r24, Y+20	; 0x14
 4b0:	9d 89       	ldd	r25, Y+21	; 0x15
 4b2:	90 6e       	ori	r25, 0xE0	; 224
 4b4:	0e 94 12 03 	call	0x624	; 0x624 <softwareSpiWrite>
	pWavgen->_PSELECT = true;
 4b8:	19 87       	std	Y+9, r17	; 0x09
	writeControlRegister(pWavgen);
 4ba:	ce 01       	movw	r24, r28
 4bc:	0e 94 14 01 	call	0x228	; 0x228 <writeControlRegister>
}
 4c0:	df 91       	pop	r29
 4c2:	cf 91       	pop	r28
 4c4:	1f 91       	pop	r17
 4c6:	08 95       	ret

000004c8 <initADC>:
		}
    }
}

void initADC(void){
	PORTA.DIRCLR = PIN0_bm; 
 4c8:	81 e0       	ldi	r24, 0x01	; 1
 4ca:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x700602>
	ADCA.CTRLB = ADC_FREERUN_bm | ADC_RESOLUTION_12BIT_gc;
 4ce:	e0 e0       	ldi	r30, 0x00	; 0
 4d0:	f2 e0       	ldi	r31, 0x02	; 2
 4d2:	98 e0       	ldi	r25, 0x08	; 8
 4d4:	91 83       	std	Z+1, r25	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_INTVCC_gc;
 4d6:	90 e1       	ldi	r25, 0x10	; 16
 4d8:	92 83       	std	Z+2, r25	; 0x02
	ADCA.EVCTRL = ADC_SWEEP0_bm;
 4da:	90 e4       	ldi	r25, 0x40	; 64
 4dc:	93 83       	std	Z+3, r25	; 0x03

	ADCA.PRESCALER = ADC_PRESCALER_DIV512_gc;
 4de:	97 e0       	ldi	r25, 0x07	; 7
 4e0:	94 83       	std	Z+4, r25	; 0x04
	ADCA.CH0.CTRL = ADC_CH_INPUTMODE_SINGLEENDED_gc;
 4e2:	80 a3       	std	Z+32, r24	; 0x20
	ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN0_gc;
 4e4:	11 a2       	std	Z+33, r1	; 0x21
	ADCA.CTRLA = ADC_ENABLE_bm;
 4e6:	80 83       	st	Z, r24
 4e8:	08 95       	ret

000004ea <main>:
//some anti-jitter filter constants:
#define AVGSAMPLES 200	 // Amount of samples the written DAC value will be based on
#define MAXMISMATCHES 10 // Number of consecutive times the ADC sample is different from what is written to the DDS before a new frequency can be written to the DDS

int main(void)
{
 4ea:	cf 93       	push	r28
 4ec:	df 93       	push	r29
 4ee:	cd b7       	in	r28, 0x3d	; 61
 4f0:	de b7       	in	r29, 0x3e	; 62
 4f2:	a0 97       	sbiw	r28, 0x20	; 32
 4f4:	cd bf       	out	0x3d, r28	; 61
 4f6:	de bf       	out	0x3e, r29	; 62
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4f8:	83 ef       	ldi	r24, 0xF3	; 243
 4fa:	91 e0       	ldi	r25, 0x01	; 1
 4fc:	01 97       	sbiw	r24, 0x01	; 1
 4fe:	f1 f7       	brne	.-4      	; 0x4fc <main+0x12>
 500:	00 c0       	rjmp	.+0      	; 0x502 <main+0x18>
 502:	00 00       	nop
	_delay_ms(1);
	WAVGEN_t ad9833;
	initGenerator(&ad9833, WG_FMCLK);
 504:	40 e4       	ldi	r20, 0x40	; 64
 506:	58 e7       	ldi	r21, 0x78	; 120
 508:	6d e7       	ldi	r22, 0x7D	; 125
 50a:	71 e0       	ldi	r23, 0x01	; 1
 50c:	ce 01       	movw	r24, r28
 50e:	01 96       	adiw	r24, 0x01	; 1
 510:	0e 94 63 01 	call	0x2c6	; 0x2c6 <initGenerator>
	initADC();
 514:	0e 94 64 02 	call	0x4c8	; 0x4c8 <initADC>
	setWaveform(&ad9833, SINEWAVE);
 518:	60 e0       	ldi	r22, 0x00	; 0
 51a:	ce 01       	movw	r24, r28
 51c:	01 96       	adiw	r24, 0x01	; 1
 51e:	0e 94 a0 01 	call	0x340	; 0x340 <setWaveform>
	setPhaseDegrees(&ad9833, 0);
 522:	60 e0       	ldi	r22, 0x00	; 0
 524:	70 e0       	ldi	r23, 0x00	; 0
 526:	ce 01       	movw	r24, r28
 528:	01 96       	adiw	r24, 0x01	; 1
 52a:	0e 94 11 02 	call	0x422	; 0x422 <setPhaseDegrees>

	static uint16_t lastMeasurements[AVGSAMPLES];
	setFrequency(&ad9833, 1);
 52e:	41 e0       	ldi	r20, 0x01	; 1
 530:	50 e0       	ldi	r21, 0x00	; 0
 532:	60 e0       	ldi	r22, 0x00	; 0
 534:	70 e0       	ldi	r23, 0x00	; 0
 536:	ce 01       	movw	r24, r28
 538:	01 96       	adiw	r24, 0x01	; 1
 53a:	0e 94 b6 01 	call	0x36c	; 0x36c <setFrequency>
    while (1) 
    {	
		if((ADCA.CH0.INTFLAGS & ADC_CH_CHIF_bm)){
 53e:	c1 2c       	mov	r12, r1
 540:	68 94       	set
 542:	dd 24       	eor	r13, r13
 544:	d1 f8       	bld	r13, 1
			lastMeasurements[0] = ADCA.CH0.RES;
 546:	03 e0       	ldi	r16, 0x03	; 3
 548:	10 e2       	ldi	r17, 0x20	; 32
			ADCA.CH0.INTFLAGS = ADC_CH_CHIF_bm;
 54a:	77 24       	eor	r7, r7
 54c:	73 94       	inc	r7
 54e:	0f 2e       	mov	r0, r31
 550:	f3 e9       	ldi	r31, 0x93	; 147
 552:	ef 2e       	mov	r14, r31
 554:	f1 e2       	ldi	r31, 0x21	; 33
 556:	ff 2e       	mov	r15, r31
 558:	f0 2d       	mov	r31, r0
			
			uint32_t average = 0;
			for(uint8_t i = 0; i< AVGSAMPLES; i++){
				average+=lastMeasurements[i];
			}
			average/=AVGSAMPLES;
 55a:	0f 2e       	mov	r0, r31
 55c:	f8 ec       	ldi	r31, 0xC8	; 200
 55e:	2f 2e       	mov	r2, r31
 560:	31 2c       	mov	r3, r1
 562:	41 2c       	mov	r4, r1
 564:	51 2c       	mov	r5, r1
 566:	f0 2d       	mov	r31, r0

	static uint16_t lastMeasurements[AVGSAMPLES];
	setFrequency(&ad9833, 1);
    while (1) 
    {	
		if((ADCA.CH0.INTFLAGS & ADC_CH_CHIF_bm)){
 568:	f6 01       	movw	r30, r12
 56a:	83 a1       	ldd	r24, Z+35	; 0x23
 56c:	80 ff       	sbrs	r24, 0
 56e:	fc cf       	rjmp	.-8      	; 0x568 <main+0x7e>
			lastMeasurements[0] = ADCA.CH0.RES;
 570:	84 a1       	ldd	r24, Z+36	; 0x24
 572:	95 a1       	ldd	r25, Z+37	; 0x25
 574:	f8 01       	movw	r30, r16
 576:	80 83       	st	Z, r24
 578:	91 83       	std	Z+1, r25	; 0x01
			ADCA.CH0.INTFLAGS = ADC_CH_CHIF_bm;
 57a:	f6 01       	movw	r30, r12
 57c:	73 a2       	std	Z+35, r7	; 0x23
 57e:	e3 e0       	ldi	r30, 0x03	; 3
 580:	f0 e2       	ldi	r31, 0x20	; 32
			
			uint32_t average = 0;
 582:	40 e0       	ldi	r20, 0x00	; 0
 584:	50 e0       	ldi	r21, 0x00	; 0
 586:	ba 01       	movw	r22, r20
			for(uint8_t i = 0; i< AVGSAMPLES; i++){
				average+=lastMeasurements[i];
 588:	81 91       	ld	r24, Z+
 58a:	91 91       	ld	r25, Z+
 58c:	48 0f       	add	r20, r24
 58e:	59 1f       	adc	r21, r25
 590:	61 1d       	adc	r22, r1
 592:	71 1d       	adc	r23, r1
		if((ADCA.CH0.INTFLAGS & ADC_CH_CHIF_bm)){
			lastMeasurements[0] = ADCA.CH0.RES;
			ADCA.CH0.INTFLAGS = ADC_CH_CHIF_bm;
			
			uint32_t average = 0;
			for(uint8_t i = 0; i< AVGSAMPLES; i++){
 594:	ee 16       	cp	r14, r30
 596:	ff 06       	cpc	r15, r31
 598:	b9 f7       	brne	.-18     	; 0x588 <main+0x9e>
				average+=lastMeasurements[i];
			}
			average/=AVGSAMPLES;
 59a:	cb 01       	movw	r24, r22
 59c:	ba 01       	movw	r22, r20
 59e:	a2 01       	movw	r20, r4
 5a0:	91 01       	movw	r18, r2
 5a2:	0e 94 cd 04 	call	0x99a	; 0x99a <__udivmodsi4>
 5a6:	49 01       	movw	r8, r18
 5a8:	5a 01       	movw	r10, r20
			
			static uint8_t misMatchCount;
			static uint16_t dacValue = 0;
			
			if(average != dacValue){
 5aa:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <dacValue.3984>
 5ae:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <dacValue.3984+0x1>
 5b2:	a0 e0       	ldi	r26, 0x00	; 0
 5b4:	b0 e0       	ldi	r27, 0x00	; 0
 5b6:	28 17       	cp	r18, r24
 5b8:	39 07       	cpc	r19, r25
 5ba:	4a 07       	cpc	r20, r26
 5bc:	5b 07       	cpc	r21, r27
 5be:	41 f0       	breq	.+16     	; 0x5d0 <main+0xe6>
				misMatchCount++;
 5c0:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
 5c4:	8f 5f       	subi	r24, 0xFF	; 255
 5c6:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__DATA_REGION_ORIGIN__>
			} else{
				misMatchCount = 0;
			}
			
			if(misMatchCount>MAXMISMATCHES){
 5ca:	8b 30       	cpi	r24, 0x0B	; 11
 5cc:	b0 f0       	brcs	.+44     	; 0x5fa <main+0x110>
 5ce:	03 c0       	rjmp	.+6      	; 0x5d6 <main+0xec>
			static uint16_t dacValue = 0;
			
			if(average != dacValue){
				misMatchCount++;
			} else{
				misMatchCount = 0;
 5d0:	10 92 00 20 	sts	0x2000, r1	; 0x802000 <__DATA_REGION_ORIGIN__>
 5d4:	12 c0       	rjmp	.+36     	; 0x5fa <main+0x110>
			}
			
			if(misMatchCount>MAXMISMATCHES){
				setFrequency(&ad9833, (average-190)*2);
 5d6:	ba 01       	movw	r22, r20
 5d8:	a9 01       	movw	r20, r18
 5da:	4e 5b       	subi	r20, 0xBE	; 190
 5dc:	51 09       	sbc	r21, r1
 5de:	61 09       	sbc	r22, r1
 5e0:	70 48       	sbci	r23, 0x80	; 128
 5e2:	44 0f       	add	r20, r20
 5e4:	55 1f       	adc	r21, r21
 5e6:	66 1f       	adc	r22, r22
 5e8:	77 1f       	adc	r23, r23
 5ea:	ce 01       	movw	r24, r28
 5ec:	01 96       	adiw	r24, 0x01	; 1
 5ee:	0e 94 b6 01 	call	0x36c	; 0x36c <setFrequency>
				dacValue = average;
 5f2:	80 92 01 20 	sts	0x2001, r8	; 0x802001 <dacValue.3984>
 5f6:	90 92 02 20 	sts	0x2002, r9	; 0x802002 <dacValue.3984+0x1>
 5fa:	e1 e9       	ldi	r30, 0x91	; 145
 5fc:	f1 e2       	ldi	r31, 0x21	; 33
			}

			for(uint8_t i = AVGSAMPLES-1; i>0; i--){
				lastMeasurements[i] = lastMeasurements[i-1];
 5fe:	92 91       	ld	r25, -Z
 600:	82 91       	ld	r24, -Z
 602:	82 83       	std	Z+2, r24	; 0x02
 604:	93 83       	std	Z+3, r25	; 0x03
			if(misMatchCount>MAXMISMATCHES){
				setFrequency(&ad9833, (average-190)*2);
				dacValue = average;
			}

			for(uint8_t i = AVGSAMPLES-1; i>0; i--){
 606:	0e 17       	cp	r16, r30
 608:	1f 07       	cpc	r17, r31
 60a:	c9 f7       	brne	.-14     	; 0x5fe <main+0x114>
 60c:	ad cf       	rjmp	.-166    	; 0x568 <main+0x7e>

0000060e <initSoftwareSpi>:
#define F_CPU 2000000UL 

#include "SoftSpi.h"

void initSoftwareSpi(void){
	SCLKPORT.DIRSET = SCLKPIN;
 60e:	e0 e6       	ldi	r30, 0x60	; 96
 610:	f6 e0       	ldi	r31, 0x06	; 6
 612:	92 e0       	ldi	r25, 0x02	; 2
 614:	91 83       	std	Z+1, r25	; 0x01
	FSYNCPORT.DIRSET = FSYNCPIN;
 616:	84 e0       	ldi	r24, 0x04	; 4
 618:	81 83       	std	Z+1, r24	; 0x01
	SCLKPORT.OUTSET = SCLKPIN;
 61a:	95 83       	std	Z+5, r25	; 0x05
	FSYNCPORT.OUTSET = FSYNCPIN;
 61c:	85 83       	std	Z+5, r24	; 0x05
	SDATPORT.DIRSET = SDATPIN;
 61e:	81 e0       	ldi	r24, 0x01	; 1
 620:	81 83       	std	Z+1, r24	; 0x01
 622:	08 95       	ret

00000624 <softwareSpiWrite>:
}

void softwareSpiWrite(uint16_t data){
 624:	bc 01       	movw	r22, r24
	FSYNCPORT.OUTCLR = FSYNCPIN;
 626:	84 e0       	ldi	r24, 0x04	; 4
 628:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 62c:	2f e0       	ldi	r18, 0x0F	; 15
 62e:	30 e0       	ldi	r19, 0x00	; 0
	for(uint8_t i = 0; i<16; i++){
		if((data>>(15-i)) & 0x0001) SDATPORT.OUTSET = SDATPIN;
		else SDATPORT.OUTCLR = SDATPIN;
 630:	e0 e6       	ldi	r30, 0x60	; 96
 632:	f6 e0       	ldi	r31, 0x06	; 6
 634:	81 e0       	ldi	r24, 0x01	; 1
		
		SCLKPORT.OUTCLR = SCLKPIN;
 636:	92 e0       	ldi	r25, 0x02	; 2
}

void softwareSpiWrite(uint16_t data){
	FSYNCPORT.OUTCLR = FSYNCPIN;
	for(uint8_t i = 0; i<16; i++){
		if((data>>(15-i)) & 0x0001) SDATPORT.OUTSET = SDATPIN;
 638:	ab 01       	movw	r20, r22
 63a:	02 2e       	mov	r0, r18
 63c:	02 c0       	rjmp	.+4      	; 0x642 <softwareSpiWrite+0x1e>
 63e:	56 95       	lsr	r21
 640:	47 95       	ror	r20
 642:	0a 94       	dec	r0
 644:	e2 f7       	brpl	.-8      	; 0x63e <softwareSpiWrite+0x1a>
 646:	40 ff       	sbrs	r20, 0
 648:	02 c0       	rjmp	.+4      	; 0x64e <softwareSpiWrite+0x2a>
 64a:	85 83       	std	Z+5, r24	; 0x05
 64c:	01 c0       	rjmp	.+2      	; 0x650 <softwareSpiWrite+0x2c>
		else SDATPORT.OUTCLR = SDATPIN;
 64e:	86 83       	std	Z+6, r24	; 0x06
		
		SCLKPORT.OUTCLR = SCLKPIN;
 650:	96 83       	std	Z+6, r25	; 0x06
		SCLKPORT.OUTSET = SCLKPIN;
 652:	95 83       	std	Z+5, r25	; 0x05
 654:	21 50       	subi	r18, 0x01	; 1
 656:	31 09       	sbc	r19, r1
 658:	78 f7       	brcc	.-34     	; 0x638 <softwareSpiWrite+0x14>
	}
	FSYNCPORT.OUTSET = FSYNCPIN;
 65a:	84 e0       	ldi	r24, 0x04	; 4
 65c:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
 660:	08 95       	ret

00000662 <__divsf3>:
 662:	0e 94 45 03 	call	0x68a	; 0x68a <__divsf3x>
 666:	0c 94 26 04 	jmp	0x84c	; 0x84c <__fp_round>
 66a:	0e 94 1f 04 	call	0x83e	; 0x83e <__fp_pscB>
 66e:	58 f0       	brcs	.+22     	; 0x686 <__divsf3+0x24>
 670:	0e 94 18 04 	call	0x830	; 0x830 <__fp_pscA>
 674:	40 f0       	brcs	.+16     	; 0x686 <__divsf3+0x24>
 676:	29 f4       	brne	.+10     	; 0x682 <__divsf3+0x20>
 678:	5f 3f       	cpi	r21, 0xFF	; 255
 67a:	29 f0       	breq	.+10     	; 0x686 <__divsf3+0x24>
 67c:	0c 94 0f 04 	jmp	0x81e	; 0x81e <__fp_inf>
 680:	51 11       	cpse	r21, r1
 682:	0c 94 5a 04 	jmp	0x8b4	; 0x8b4 <__fp_szero>
 686:	0c 94 15 04 	jmp	0x82a	; 0x82a <__fp_nan>

0000068a <__divsf3x>:
 68a:	0e 94 37 04 	call	0x86e	; 0x86e <__fp_split3>
 68e:	68 f3       	brcs	.-38     	; 0x66a <__divsf3+0x8>

00000690 <__divsf3_pse>:
 690:	99 23       	and	r25, r25
 692:	b1 f3       	breq	.-20     	; 0x680 <__divsf3+0x1e>
 694:	55 23       	and	r21, r21
 696:	91 f3       	breq	.-28     	; 0x67c <__divsf3+0x1a>
 698:	95 1b       	sub	r25, r21
 69a:	55 0b       	sbc	r21, r21
 69c:	bb 27       	eor	r27, r27
 69e:	aa 27       	eor	r26, r26
 6a0:	62 17       	cp	r22, r18
 6a2:	73 07       	cpc	r23, r19
 6a4:	84 07       	cpc	r24, r20
 6a6:	38 f0       	brcs	.+14     	; 0x6b6 <__divsf3_pse+0x26>
 6a8:	9f 5f       	subi	r25, 0xFF	; 255
 6aa:	5f 4f       	sbci	r21, 0xFF	; 255
 6ac:	22 0f       	add	r18, r18
 6ae:	33 1f       	adc	r19, r19
 6b0:	44 1f       	adc	r20, r20
 6b2:	aa 1f       	adc	r26, r26
 6b4:	a9 f3       	breq	.-22     	; 0x6a0 <__divsf3_pse+0x10>
 6b6:	35 d0       	rcall	.+106    	; 0x722 <__divsf3_pse+0x92>
 6b8:	0e 2e       	mov	r0, r30
 6ba:	3a f0       	brmi	.+14     	; 0x6ca <__divsf3_pse+0x3a>
 6bc:	e0 e8       	ldi	r30, 0x80	; 128
 6be:	32 d0       	rcall	.+100    	; 0x724 <__divsf3_pse+0x94>
 6c0:	91 50       	subi	r25, 0x01	; 1
 6c2:	50 40       	sbci	r21, 0x00	; 0
 6c4:	e6 95       	lsr	r30
 6c6:	00 1c       	adc	r0, r0
 6c8:	ca f7       	brpl	.-14     	; 0x6bc <__divsf3_pse+0x2c>
 6ca:	2b d0       	rcall	.+86     	; 0x722 <__divsf3_pse+0x92>
 6cc:	fe 2f       	mov	r31, r30
 6ce:	29 d0       	rcall	.+82     	; 0x722 <__divsf3_pse+0x92>
 6d0:	66 0f       	add	r22, r22
 6d2:	77 1f       	adc	r23, r23
 6d4:	88 1f       	adc	r24, r24
 6d6:	bb 1f       	adc	r27, r27
 6d8:	26 17       	cp	r18, r22
 6da:	37 07       	cpc	r19, r23
 6dc:	48 07       	cpc	r20, r24
 6de:	ab 07       	cpc	r26, r27
 6e0:	b0 e8       	ldi	r27, 0x80	; 128
 6e2:	09 f0       	breq	.+2      	; 0x6e6 <__divsf3_pse+0x56>
 6e4:	bb 0b       	sbc	r27, r27
 6e6:	80 2d       	mov	r24, r0
 6e8:	bf 01       	movw	r22, r30
 6ea:	ff 27       	eor	r31, r31
 6ec:	93 58       	subi	r25, 0x83	; 131
 6ee:	5f 4f       	sbci	r21, 0xFF	; 255
 6f0:	3a f0       	brmi	.+14     	; 0x700 <__divsf3_pse+0x70>
 6f2:	9e 3f       	cpi	r25, 0xFE	; 254
 6f4:	51 05       	cpc	r21, r1
 6f6:	78 f0       	brcs	.+30     	; 0x716 <__divsf3_pse+0x86>
 6f8:	0c 94 0f 04 	jmp	0x81e	; 0x81e <__fp_inf>
 6fc:	0c 94 5a 04 	jmp	0x8b4	; 0x8b4 <__fp_szero>
 700:	5f 3f       	cpi	r21, 0xFF	; 255
 702:	e4 f3       	brlt	.-8      	; 0x6fc <__divsf3_pse+0x6c>
 704:	98 3e       	cpi	r25, 0xE8	; 232
 706:	d4 f3       	brlt	.-12     	; 0x6fc <__divsf3_pse+0x6c>
 708:	86 95       	lsr	r24
 70a:	77 95       	ror	r23
 70c:	67 95       	ror	r22
 70e:	b7 95       	ror	r27
 710:	f7 95       	ror	r31
 712:	9f 5f       	subi	r25, 0xFF	; 255
 714:	c9 f7       	brne	.-14     	; 0x708 <__divsf3_pse+0x78>
 716:	88 0f       	add	r24, r24
 718:	91 1d       	adc	r25, r1
 71a:	96 95       	lsr	r25
 71c:	87 95       	ror	r24
 71e:	97 f9       	bld	r25, 7
 720:	08 95       	ret
 722:	e1 e0       	ldi	r30, 0x01	; 1
 724:	66 0f       	add	r22, r22
 726:	77 1f       	adc	r23, r23
 728:	88 1f       	adc	r24, r24
 72a:	bb 1f       	adc	r27, r27
 72c:	62 17       	cp	r22, r18
 72e:	73 07       	cpc	r23, r19
 730:	84 07       	cpc	r24, r20
 732:	ba 07       	cpc	r27, r26
 734:	20 f0       	brcs	.+8      	; 0x73e <__divsf3_pse+0xae>
 736:	62 1b       	sub	r22, r18
 738:	73 0b       	sbc	r23, r19
 73a:	84 0b       	sbc	r24, r20
 73c:	ba 0b       	sbc	r27, r26
 73e:	ee 1f       	adc	r30, r30
 740:	88 f7       	brcc	.-30     	; 0x724 <__divsf3_pse+0x94>
 742:	e0 95       	com	r30
 744:	08 95       	ret

00000746 <__fixunssfsi>:
 746:	0e 94 3f 04 	call	0x87e	; 0x87e <__fp_splitA>
 74a:	88 f0       	brcs	.+34     	; 0x76e <__fixunssfsi+0x28>
 74c:	9f 57       	subi	r25, 0x7F	; 127
 74e:	98 f0       	brcs	.+38     	; 0x776 <__fixunssfsi+0x30>
 750:	b9 2f       	mov	r27, r25
 752:	99 27       	eor	r25, r25
 754:	b7 51       	subi	r27, 0x17	; 23
 756:	b0 f0       	brcs	.+44     	; 0x784 <__fixunssfsi+0x3e>
 758:	e1 f0       	breq	.+56     	; 0x792 <__fixunssfsi+0x4c>
 75a:	66 0f       	add	r22, r22
 75c:	77 1f       	adc	r23, r23
 75e:	88 1f       	adc	r24, r24
 760:	99 1f       	adc	r25, r25
 762:	1a f0       	brmi	.+6      	; 0x76a <__fixunssfsi+0x24>
 764:	ba 95       	dec	r27
 766:	c9 f7       	brne	.-14     	; 0x75a <__fixunssfsi+0x14>
 768:	14 c0       	rjmp	.+40     	; 0x792 <__fixunssfsi+0x4c>
 76a:	b1 30       	cpi	r27, 0x01	; 1
 76c:	91 f0       	breq	.+36     	; 0x792 <__fixunssfsi+0x4c>
 76e:	0e 94 59 04 	call	0x8b2	; 0x8b2 <__fp_zero>
 772:	b1 e0       	ldi	r27, 0x01	; 1
 774:	08 95       	ret
 776:	0c 94 59 04 	jmp	0x8b2	; 0x8b2 <__fp_zero>
 77a:	67 2f       	mov	r22, r23
 77c:	78 2f       	mov	r23, r24
 77e:	88 27       	eor	r24, r24
 780:	b8 5f       	subi	r27, 0xF8	; 248
 782:	39 f0       	breq	.+14     	; 0x792 <__fixunssfsi+0x4c>
 784:	b9 3f       	cpi	r27, 0xF9	; 249
 786:	cc f3       	brlt	.-14     	; 0x77a <__fixunssfsi+0x34>
 788:	86 95       	lsr	r24
 78a:	77 95       	ror	r23
 78c:	67 95       	ror	r22
 78e:	b3 95       	inc	r27
 790:	d9 f7       	brne	.-10     	; 0x788 <__fixunssfsi+0x42>
 792:	3e f4       	brtc	.+14     	; 0x7a2 <__fixunssfsi+0x5c>
 794:	90 95       	com	r25
 796:	80 95       	com	r24
 798:	70 95       	com	r23
 79a:	61 95       	neg	r22
 79c:	7f 4f       	sbci	r23, 0xFF	; 255
 79e:	8f 4f       	sbci	r24, 0xFF	; 255
 7a0:	9f 4f       	sbci	r25, 0xFF	; 255
 7a2:	08 95       	ret

000007a4 <__floatunsisf>:
 7a4:	e8 94       	clt
 7a6:	09 c0       	rjmp	.+18     	; 0x7ba <__floatsisf+0x12>

000007a8 <__floatsisf>:
 7a8:	97 fb       	bst	r25, 7
 7aa:	3e f4       	brtc	.+14     	; 0x7ba <__floatsisf+0x12>
 7ac:	90 95       	com	r25
 7ae:	80 95       	com	r24
 7b0:	70 95       	com	r23
 7b2:	61 95       	neg	r22
 7b4:	7f 4f       	sbci	r23, 0xFF	; 255
 7b6:	8f 4f       	sbci	r24, 0xFF	; 255
 7b8:	9f 4f       	sbci	r25, 0xFF	; 255
 7ba:	99 23       	and	r25, r25
 7bc:	a9 f0       	breq	.+42     	; 0x7e8 <__floatsisf+0x40>
 7be:	f9 2f       	mov	r31, r25
 7c0:	96 e9       	ldi	r25, 0x96	; 150
 7c2:	bb 27       	eor	r27, r27
 7c4:	93 95       	inc	r25
 7c6:	f6 95       	lsr	r31
 7c8:	87 95       	ror	r24
 7ca:	77 95       	ror	r23
 7cc:	67 95       	ror	r22
 7ce:	b7 95       	ror	r27
 7d0:	f1 11       	cpse	r31, r1
 7d2:	f8 cf       	rjmp	.-16     	; 0x7c4 <__floatsisf+0x1c>
 7d4:	fa f4       	brpl	.+62     	; 0x814 <__floatsisf+0x6c>
 7d6:	bb 0f       	add	r27, r27
 7d8:	11 f4       	brne	.+4      	; 0x7de <__floatsisf+0x36>
 7da:	60 ff       	sbrs	r22, 0
 7dc:	1b c0       	rjmp	.+54     	; 0x814 <__floatsisf+0x6c>
 7de:	6f 5f       	subi	r22, 0xFF	; 255
 7e0:	7f 4f       	sbci	r23, 0xFF	; 255
 7e2:	8f 4f       	sbci	r24, 0xFF	; 255
 7e4:	9f 4f       	sbci	r25, 0xFF	; 255
 7e6:	16 c0       	rjmp	.+44     	; 0x814 <__floatsisf+0x6c>
 7e8:	88 23       	and	r24, r24
 7ea:	11 f0       	breq	.+4      	; 0x7f0 <__floatsisf+0x48>
 7ec:	96 e9       	ldi	r25, 0x96	; 150
 7ee:	11 c0       	rjmp	.+34     	; 0x812 <__floatsisf+0x6a>
 7f0:	77 23       	and	r23, r23
 7f2:	21 f0       	breq	.+8      	; 0x7fc <__floatsisf+0x54>
 7f4:	9e e8       	ldi	r25, 0x8E	; 142
 7f6:	87 2f       	mov	r24, r23
 7f8:	76 2f       	mov	r23, r22
 7fa:	05 c0       	rjmp	.+10     	; 0x806 <__floatsisf+0x5e>
 7fc:	66 23       	and	r22, r22
 7fe:	71 f0       	breq	.+28     	; 0x81c <__floatsisf+0x74>
 800:	96 e8       	ldi	r25, 0x86	; 134
 802:	86 2f       	mov	r24, r22
 804:	70 e0       	ldi	r23, 0x00	; 0
 806:	60 e0       	ldi	r22, 0x00	; 0
 808:	2a f0       	brmi	.+10     	; 0x814 <__floatsisf+0x6c>
 80a:	9a 95       	dec	r25
 80c:	66 0f       	add	r22, r22
 80e:	77 1f       	adc	r23, r23
 810:	88 1f       	adc	r24, r24
 812:	da f7       	brpl	.-10     	; 0x80a <__floatsisf+0x62>
 814:	88 0f       	add	r24, r24
 816:	96 95       	lsr	r25
 818:	87 95       	ror	r24
 81a:	97 f9       	bld	r25, 7
 81c:	08 95       	ret

0000081e <__fp_inf>:
 81e:	97 f9       	bld	r25, 7
 820:	9f 67       	ori	r25, 0x7F	; 127
 822:	80 e8       	ldi	r24, 0x80	; 128
 824:	70 e0       	ldi	r23, 0x00	; 0
 826:	60 e0       	ldi	r22, 0x00	; 0
 828:	08 95       	ret

0000082a <__fp_nan>:
 82a:	9f ef       	ldi	r25, 0xFF	; 255
 82c:	80 ec       	ldi	r24, 0xC0	; 192
 82e:	08 95       	ret

00000830 <__fp_pscA>:
 830:	00 24       	eor	r0, r0
 832:	0a 94       	dec	r0
 834:	16 16       	cp	r1, r22
 836:	17 06       	cpc	r1, r23
 838:	18 06       	cpc	r1, r24
 83a:	09 06       	cpc	r0, r25
 83c:	08 95       	ret

0000083e <__fp_pscB>:
 83e:	00 24       	eor	r0, r0
 840:	0a 94       	dec	r0
 842:	12 16       	cp	r1, r18
 844:	13 06       	cpc	r1, r19
 846:	14 06       	cpc	r1, r20
 848:	05 06       	cpc	r0, r21
 84a:	08 95       	ret

0000084c <__fp_round>:
 84c:	09 2e       	mov	r0, r25
 84e:	03 94       	inc	r0
 850:	00 0c       	add	r0, r0
 852:	11 f4       	brne	.+4      	; 0x858 <__fp_round+0xc>
 854:	88 23       	and	r24, r24
 856:	52 f0       	brmi	.+20     	; 0x86c <__fp_round+0x20>
 858:	bb 0f       	add	r27, r27
 85a:	40 f4       	brcc	.+16     	; 0x86c <__fp_round+0x20>
 85c:	bf 2b       	or	r27, r31
 85e:	11 f4       	brne	.+4      	; 0x864 <__fp_round+0x18>
 860:	60 ff       	sbrs	r22, 0
 862:	04 c0       	rjmp	.+8      	; 0x86c <__fp_round+0x20>
 864:	6f 5f       	subi	r22, 0xFF	; 255
 866:	7f 4f       	sbci	r23, 0xFF	; 255
 868:	8f 4f       	sbci	r24, 0xFF	; 255
 86a:	9f 4f       	sbci	r25, 0xFF	; 255
 86c:	08 95       	ret

0000086e <__fp_split3>:
 86e:	57 fd       	sbrc	r21, 7
 870:	90 58       	subi	r25, 0x80	; 128
 872:	44 0f       	add	r20, r20
 874:	55 1f       	adc	r21, r21
 876:	59 f0       	breq	.+22     	; 0x88e <__fp_splitA+0x10>
 878:	5f 3f       	cpi	r21, 0xFF	; 255
 87a:	71 f0       	breq	.+28     	; 0x898 <__fp_splitA+0x1a>
 87c:	47 95       	ror	r20

0000087e <__fp_splitA>:
 87e:	88 0f       	add	r24, r24
 880:	97 fb       	bst	r25, 7
 882:	99 1f       	adc	r25, r25
 884:	61 f0       	breq	.+24     	; 0x89e <__fp_splitA+0x20>
 886:	9f 3f       	cpi	r25, 0xFF	; 255
 888:	79 f0       	breq	.+30     	; 0x8a8 <__fp_splitA+0x2a>
 88a:	87 95       	ror	r24
 88c:	08 95       	ret
 88e:	12 16       	cp	r1, r18
 890:	13 06       	cpc	r1, r19
 892:	14 06       	cpc	r1, r20
 894:	55 1f       	adc	r21, r21
 896:	f2 cf       	rjmp	.-28     	; 0x87c <__fp_split3+0xe>
 898:	46 95       	lsr	r20
 89a:	f1 df       	rcall	.-30     	; 0x87e <__fp_splitA>
 89c:	08 c0       	rjmp	.+16     	; 0x8ae <__fp_splitA+0x30>
 89e:	16 16       	cp	r1, r22
 8a0:	17 06       	cpc	r1, r23
 8a2:	18 06       	cpc	r1, r24
 8a4:	99 1f       	adc	r25, r25
 8a6:	f1 cf       	rjmp	.-30     	; 0x88a <__fp_splitA+0xc>
 8a8:	86 95       	lsr	r24
 8aa:	71 05       	cpc	r23, r1
 8ac:	61 05       	cpc	r22, r1
 8ae:	08 94       	sec
 8b0:	08 95       	ret

000008b2 <__fp_zero>:
 8b2:	e8 94       	clt

000008b4 <__fp_szero>:
 8b4:	bb 27       	eor	r27, r27
 8b6:	66 27       	eor	r22, r22
 8b8:	77 27       	eor	r23, r23
 8ba:	cb 01       	movw	r24, r22
 8bc:	97 f9       	bld	r25, 7
 8be:	08 95       	ret

000008c0 <__mulsf3>:
 8c0:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__mulsf3x>
 8c4:	0c 94 26 04 	jmp	0x84c	; 0x84c <__fp_round>
 8c8:	0e 94 18 04 	call	0x830	; 0x830 <__fp_pscA>
 8cc:	38 f0       	brcs	.+14     	; 0x8dc <__mulsf3+0x1c>
 8ce:	0e 94 1f 04 	call	0x83e	; 0x83e <__fp_pscB>
 8d2:	20 f0       	brcs	.+8      	; 0x8dc <__mulsf3+0x1c>
 8d4:	95 23       	and	r25, r21
 8d6:	11 f0       	breq	.+4      	; 0x8dc <__mulsf3+0x1c>
 8d8:	0c 94 0f 04 	jmp	0x81e	; 0x81e <__fp_inf>
 8dc:	0c 94 15 04 	jmp	0x82a	; 0x82a <__fp_nan>
 8e0:	11 24       	eor	r1, r1
 8e2:	0c 94 5a 04 	jmp	0x8b4	; 0x8b4 <__fp_szero>

000008e6 <__mulsf3x>:
 8e6:	0e 94 37 04 	call	0x86e	; 0x86e <__fp_split3>
 8ea:	70 f3       	brcs	.-36     	; 0x8c8 <__mulsf3+0x8>

000008ec <__mulsf3_pse>:
 8ec:	95 9f       	mul	r25, r21
 8ee:	c1 f3       	breq	.-16     	; 0x8e0 <__mulsf3+0x20>
 8f0:	95 0f       	add	r25, r21
 8f2:	50 e0       	ldi	r21, 0x00	; 0
 8f4:	55 1f       	adc	r21, r21
 8f6:	62 9f       	mul	r22, r18
 8f8:	f0 01       	movw	r30, r0
 8fa:	72 9f       	mul	r23, r18
 8fc:	bb 27       	eor	r27, r27
 8fe:	f0 0d       	add	r31, r0
 900:	b1 1d       	adc	r27, r1
 902:	63 9f       	mul	r22, r19
 904:	aa 27       	eor	r26, r26
 906:	f0 0d       	add	r31, r0
 908:	b1 1d       	adc	r27, r1
 90a:	aa 1f       	adc	r26, r26
 90c:	64 9f       	mul	r22, r20
 90e:	66 27       	eor	r22, r22
 910:	b0 0d       	add	r27, r0
 912:	a1 1d       	adc	r26, r1
 914:	66 1f       	adc	r22, r22
 916:	82 9f       	mul	r24, r18
 918:	22 27       	eor	r18, r18
 91a:	b0 0d       	add	r27, r0
 91c:	a1 1d       	adc	r26, r1
 91e:	62 1f       	adc	r22, r18
 920:	73 9f       	mul	r23, r19
 922:	b0 0d       	add	r27, r0
 924:	a1 1d       	adc	r26, r1
 926:	62 1f       	adc	r22, r18
 928:	83 9f       	mul	r24, r19
 92a:	a0 0d       	add	r26, r0
 92c:	61 1d       	adc	r22, r1
 92e:	22 1f       	adc	r18, r18
 930:	74 9f       	mul	r23, r20
 932:	33 27       	eor	r19, r19
 934:	a0 0d       	add	r26, r0
 936:	61 1d       	adc	r22, r1
 938:	23 1f       	adc	r18, r19
 93a:	84 9f       	mul	r24, r20
 93c:	60 0d       	add	r22, r0
 93e:	21 1d       	adc	r18, r1
 940:	82 2f       	mov	r24, r18
 942:	76 2f       	mov	r23, r22
 944:	6a 2f       	mov	r22, r26
 946:	11 24       	eor	r1, r1
 948:	9f 57       	subi	r25, 0x7F	; 127
 94a:	50 40       	sbci	r21, 0x00	; 0
 94c:	9a f0       	brmi	.+38     	; 0x974 <__mulsf3_pse+0x88>
 94e:	f1 f0       	breq	.+60     	; 0x98c <__mulsf3_pse+0xa0>
 950:	88 23       	and	r24, r24
 952:	4a f0       	brmi	.+18     	; 0x966 <__mulsf3_pse+0x7a>
 954:	ee 0f       	add	r30, r30
 956:	ff 1f       	adc	r31, r31
 958:	bb 1f       	adc	r27, r27
 95a:	66 1f       	adc	r22, r22
 95c:	77 1f       	adc	r23, r23
 95e:	88 1f       	adc	r24, r24
 960:	91 50       	subi	r25, 0x01	; 1
 962:	50 40       	sbci	r21, 0x00	; 0
 964:	a9 f7       	brne	.-22     	; 0x950 <__mulsf3_pse+0x64>
 966:	9e 3f       	cpi	r25, 0xFE	; 254
 968:	51 05       	cpc	r21, r1
 96a:	80 f0       	brcs	.+32     	; 0x98c <__mulsf3_pse+0xa0>
 96c:	0c 94 0f 04 	jmp	0x81e	; 0x81e <__fp_inf>
 970:	0c 94 5a 04 	jmp	0x8b4	; 0x8b4 <__fp_szero>
 974:	5f 3f       	cpi	r21, 0xFF	; 255
 976:	e4 f3       	brlt	.-8      	; 0x970 <__mulsf3_pse+0x84>
 978:	98 3e       	cpi	r25, 0xE8	; 232
 97a:	d4 f3       	brlt	.-12     	; 0x970 <__mulsf3_pse+0x84>
 97c:	86 95       	lsr	r24
 97e:	77 95       	ror	r23
 980:	67 95       	ror	r22
 982:	b7 95       	ror	r27
 984:	f7 95       	ror	r31
 986:	e7 95       	ror	r30
 988:	9f 5f       	subi	r25, 0xFF	; 255
 98a:	c1 f7       	brne	.-16     	; 0x97c <__mulsf3_pse+0x90>
 98c:	fe 2b       	or	r31, r30
 98e:	88 0f       	add	r24, r24
 990:	91 1d       	adc	r25, r1
 992:	96 95       	lsr	r25
 994:	87 95       	ror	r24
 996:	97 f9       	bld	r25, 7
 998:	08 95       	ret

0000099a <__udivmodsi4>:
 99a:	a1 e2       	ldi	r26, 0x21	; 33
 99c:	1a 2e       	mov	r1, r26
 99e:	aa 1b       	sub	r26, r26
 9a0:	bb 1b       	sub	r27, r27
 9a2:	fd 01       	movw	r30, r26
 9a4:	0d c0       	rjmp	.+26     	; 0x9c0 <__udivmodsi4_ep>

000009a6 <__udivmodsi4_loop>:
 9a6:	aa 1f       	adc	r26, r26
 9a8:	bb 1f       	adc	r27, r27
 9aa:	ee 1f       	adc	r30, r30
 9ac:	ff 1f       	adc	r31, r31
 9ae:	a2 17       	cp	r26, r18
 9b0:	b3 07       	cpc	r27, r19
 9b2:	e4 07       	cpc	r30, r20
 9b4:	f5 07       	cpc	r31, r21
 9b6:	20 f0       	brcs	.+8      	; 0x9c0 <__udivmodsi4_ep>
 9b8:	a2 1b       	sub	r26, r18
 9ba:	b3 0b       	sbc	r27, r19
 9bc:	e4 0b       	sbc	r30, r20
 9be:	f5 0b       	sbc	r31, r21

000009c0 <__udivmodsi4_ep>:
 9c0:	66 1f       	adc	r22, r22
 9c2:	77 1f       	adc	r23, r23
 9c4:	88 1f       	adc	r24, r24
 9c6:	99 1f       	adc	r25, r25
 9c8:	1a 94       	dec	r1
 9ca:	69 f7       	brne	.-38     	; 0x9a6 <__udivmodsi4_loop>
 9cc:	60 95       	com	r22
 9ce:	70 95       	com	r23
 9d0:	80 95       	com	r24
 9d2:	90 95       	com	r25
 9d4:	9b 01       	movw	r18, r22
 9d6:	ac 01       	movw	r20, r24
 9d8:	bd 01       	movw	r22, r26
 9da:	cf 01       	movw	r24, r30
 9dc:	08 95       	ret

000009de <__umulhisi3>:
 9de:	a2 9f       	mul	r26, r18
 9e0:	b0 01       	movw	r22, r0
 9e2:	b3 9f       	mul	r27, r19
 9e4:	c0 01       	movw	r24, r0
 9e6:	a3 9f       	mul	r26, r19
 9e8:	70 0d       	add	r23, r0
 9ea:	81 1d       	adc	r24, r1
 9ec:	11 24       	eor	r1, r1
 9ee:	91 1d       	adc	r25, r1
 9f0:	b2 9f       	mul	r27, r18
 9f2:	70 0d       	add	r23, r0
 9f4:	81 1d       	adc	r24, r1
 9f6:	11 24       	eor	r1, r1
 9f8:	91 1d       	adc	r25, r1
 9fa:	08 95       	ret

000009fc <_exit>:
 9fc:	f8 94       	cli

000009fe <__stop_program>:
 9fe:	ff cf       	rjmp	.-2      	; 0x9fe <__stop_program>
