
ad9833interface.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006f2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  00000746  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000746  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000778  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  000007b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003daf  00000000  00000000  00000838  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000034a0  00000000  00000000  000045e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000088b  00000000  00000000  00007a87  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d4  00000000  00000000  00008314  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00002644  00000000  00000000  000083e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000385  00000000  00000000  0000aa2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0000adb1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
   8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
   c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  10:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  14:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  18:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  1c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  20:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  24:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  28:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  2c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  30:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  34:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  38:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  3c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  40:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  44:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  48:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  4c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  50:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  54:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  58:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  5c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  60:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  64:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  68:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  6c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  70:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  74:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  78:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  7c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  80:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  84:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  88:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  8c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  90:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  94:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  98:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  9c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  a0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  a4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  a8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  ac:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  b0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  b4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  b8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  bc:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  c0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  c4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  c8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  cc:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  d0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  d4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  d8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  dc:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  e0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  e4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  e8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  ec:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  f0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  f4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  f8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  fc:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 100:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 104:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 108:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 10c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 110:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 114:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 118:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 11c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 120:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 124:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 128:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 12c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 130:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 134:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 138:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 13c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 140:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 144:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 148:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 14c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 150:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 154:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 158:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 15c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 160:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 164:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 168:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 16c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 170:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 174:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 178:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 17c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 180:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 184:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 188:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 18c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 190:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 194:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 198:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 19c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1a0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1a4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1a8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1ac:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1b0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1b4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1b8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1bc:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1c0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1c4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1c8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1cc:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1d0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1d4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1d8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1dc:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1e0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1e4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1e8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1ec:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1f0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1f4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1f8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e5       	ldi	r29, 0x5F	; 95
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	0e 94 c9 01 	call	0x392	; 0x392 <main>
 210:	0c 94 77 03 	jmp	0x6ee	; 0x6ee <_exit>

00000214 <__bad_interrupt>:
 214:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000218 <setFrequency>:
		case TRIANGLEWAVE: pWavgen->_OPBITEN = false; pWavgen->_mode = true; break;
	}
	writeControlRegister(pWavgen);
}

void setFrequency(WAVGEN_t *pWavgen, uint32_t frequency){
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	ec 01       	movw	r28, r24
 	pWavgen->_frequencyRegister = frequency/pWavgen->_CLKratio;
 21e:	cb 01       	movw	r24, r22
 220:	ba 01       	movw	r22, r20
 222:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <__floatunsisf>
 226:	28 8d       	ldd	r18, Y+24	; 0x18
 228:	39 8d       	ldd	r19, Y+25	; 0x19
 22a:	4a 8d       	ldd	r20, Y+26	; 0x1a
 22c:	5b 8d       	ldd	r21, Y+27	; 0x1b
 22e:	0e 94 48 02 	call	0x490	; 0x490 <__divsf3>
 232:	0e 94 ba 02 	call	0x574	; 0x574 <__fixunssfsi>
 236:	6c 87       	std	Y+12, r22	; 0x0c
 238:	7d 87       	std	Y+13, r23	; 0x0d
 23a:	8e 87       	std	Y+14, r24	; 0x0e
 23c:	9f 87       	std	Y+15, r25	; 0x0f
	 softwareSpiWrite(0x4000 | (pWavgen->_frequencyRegister & 0x3FFF));	//LSB
 23e:	cb 01       	movw	r24, r22
 240:	9f 73       	andi	r25, 0x3F	; 63
 242:	90 64       	ori	r25, 0x40	; 64
 244:	0e 94 28 02 	call	0x450	; 0x450 <softwareSpiWrite>
	 softwareSpiWrite(0x8000 | ((pWavgen->_frequencyRegister >> 14) & 0x3FFF));	//MSB
 248:	8c 85       	ldd	r24, Y+12	; 0x0c
 24a:	9d 85       	ldd	r25, Y+13	; 0x0d
 24c:	ae 85       	ldd	r26, Y+14	; 0x0e
 24e:	bf 85       	ldd	r27, Y+15	; 0x0f
 250:	07 2e       	mov	r0, r23
 252:	7e e0       	ldi	r23, 0x0E	; 14
 254:	b6 95       	lsr	r27
 256:	a7 95       	ror	r26
 258:	97 95       	ror	r25
 25a:	87 95       	ror	r24
 25c:	7a 95       	dec	r23
 25e:	d1 f7       	brne	.-12     	; 0x254 <setFrequency+0x3c>
 260:	70 2d       	mov	r23, r0
 262:	9f 73       	andi	r25, 0x3F	; 63
 264:	90 68       	ori	r25, 0x80	; 128
 266:	0e 94 28 02 	call	0x450	; 0x450 <softwareSpiWrite>
}
 26a:	df 91       	pop	r29
 26c:	cf 91       	pop	r28
 26e:	08 95       	ret

00000270 <writeControlRegister>:

void writeControlRegister(WAVGEN_t *pWavgen){
 270:	fc 01       	movw	r30, r24
	pWavgen->_controlRegister = 0x0000 | (pWavgen->_mode << 1) | (pWavgen->_DIV2 << 3) |  
 272:	87 81       	ldd	r24, Z+7	; 0x07
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	9c 01       	movw	r18, r24
 278:	22 0f       	add	r18, r18
 27a:	33 1f       	adc	r19, r19
 27c:	96 81       	ldd	r25, Z+6	; 0x06
 27e:	89 2f       	mov	r24, r25
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	88 0f       	add	r24, r24
 284:	99 1f       	adc	r25, r25
 286:	88 0f       	add	r24, r24
 288:	99 1f       	adc	r25, r25
 28a:	88 0f       	add	r24, r24
 28c:	99 1f       	adc	r25, r25
 28e:	82 2b       	or	r24, r18
 290:	93 2b       	or	r25, r19
 292:	25 81       	ldd	r18, Z+5	; 0x05
 294:	40 e2       	ldi	r20, 0x20	; 32
 296:	24 9f       	mul	r18, r20
 298:	90 01       	movw	r18, r0
 29a:	11 24       	eor	r1, r1
 29c:	82 2b       	or	r24, r18
 29e:	93 2b       	or	r25, r19
 2a0:	22 85       	ldd	r18, Z+10	; 0x0a
 2a2:	40 e4       	ldi	r20, 0x40	; 64
 2a4:	24 9f       	mul	r18, r20
 2a6:	90 01       	movw	r18, r0
 2a8:	11 24       	eor	r1, r1
 2aa:	82 2b       	or	r24, r18
 2ac:	93 2b       	or	r25, r19
 2ae:	23 85       	ldd	r18, Z+11	; 0x0b
 2b0:	40 e8       	ldi	r20, 0x80	; 128
 2b2:	24 9f       	mul	r18, r20
 2b4:	90 01       	movw	r18, r0
 2b6:	11 24       	eor	r1, r1
 2b8:	82 2b       	or	r24, r18
 2ba:	93 2b       	or	r25, r19
 2bc:	24 81       	ldd	r18, Z+4	; 0x04
 2be:	92 2b       	or	r25, r18
 2c0:	21 85       	ldd	r18, Z+9	; 0x09
 2c2:	30 e0       	ldi	r19, 0x00	; 0
 2c4:	32 2f       	mov	r19, r18
 2c6:	22 27       	eor	r18, r18
 2c8:	33 0f       	add	r19, r19
 2ca:	33 0f       	add	r19, r19
 2cc:	82 2b       	or	r24, r18
 2ce:	93 2b       	or	r25, r19
 2d0:	20 85       	ldd	r18, Z+8	; 0x08
 2d2:	30 e0       	ldi	r19, 0x00	; 0
 2d4:	32 2f       	mov	r19, r18
 2d6:	22 27       	eor	r18, r18
 2d8:	33 0f       	add	r19, r19
 2da:	33 0f       	add	r19, r19
 2dc:	33 0f       	add	r19, r19
 2de:	82 2b       	or	r24, r18
 2e0:	93 2b       	or	r25, r19
 2e2:	23 81       	ldd	r18, Z+3	; 0x03
 2e4:	30 e0       	ldi	r19, 0x00	; 0
 2e6:	32 2f       	mov	r19, r18
 2e8:	22 27       	eor	r18, r18
 2ea:	32 95       	swap	r19
 2ec:	30 7f       	andi	r19, 0xF0	; 240
 2ee:	82 2b       	or	r24, r18
 2f0:	93 2b       	or	r25, r19
 2f2:	22 81       	ldd	r18, Z+2	; 0x02
 2f4:	30 e0       	ldi	r19, 0x00	; 0
 2f6:	32 2f       	mov	r19, r18
 2f8:	22 27       	eor	r18, r18
 2fa:	32 95       	swap	r19
 2fc:	33 0f       	add	r19, r19
 2fe:	30 7e       	andi	r19, 0xE0	; 224
 300:	82 2b       	or	r24, r18
 302:	93 2b       	or	r25, r19
 304:	80 83       	st	Z, r24
 306:	91 83       	std	Z+1, r25	; 0x01
										(pWavgen->_OPBITEN << 5) | (pWavgen->_SLEEP1 << 6) |
										(pWavgen->_SLEEP12 << 7) | (pWavgen->_reset << 8) | 
										(pWavgen->_PSELECT << 10) |(pWavgen->_FSELECT << 11) | 
										(pWavgen->_HLB << 12) | (pWavgen->_B28BIT << 13);
										
	softwareSpiWrite(pWavgen->_controlRegister);
 308:	0e 94 28 02 	call	0x450	; 0x450 <softwareSpiWrite>
 30c:	08 95       	ret

0000030e <initGenerator>:
 *  Author: Hendrik-Jan
 */ 
#include <math.h>
#include "AD9833.h"

void initGenerator(WAVGEN_t *pWavgen){
 30e:	cf 93       	push	r28
 310:	df 93       	push	r29
 312:	ec 01       	movw	r28, r24
	initSoftwareSpi();
 314:	0e 94 1d 02 	call	0x43a	; 0x43a <initSoftwareSpi>
	pWavgen->_controlRegister = 0; 
 318:	18 82       	st	Y, r1
 31a:	19 82       	std	Y+1, r1	; 0x01
	pWavgen->_B28BIT = true;
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	8a 83       	std	Y+2, r24	; 0x02
	pWavgen->_HLB = false;
 320:	1b 82       	std	Y+3, r1	; 0x03
	pWavgen->_reset = false;
 322:	1c 82       	std	Y+4, r1	; 0x04
	pWavgen->_OPBITEN = false;
 324:	1d 82       	std	Y+5, r1	; 0x05
	pWavgen->_DIV2 = true;
 326:	8e 83       	std	Y+6, r24	; 0x06
	
	pWavgen->_FSELECT = false;
 328:	18 86       	std	Y+8, r1	; 0x08
	pWavgen->_PSELECT = false;
 32a:	19 86       	std	Y+9, r1	; 0x09
	pWavgen->_SLEEP1 = false;
 32c:	1a 86       	std	Y+10, r1	; 0x0a
	pWavgen->_SLEEP12 = false;
 32e:	1b 86       	std	Y+11, r1	; 0x0b
	
	
	pWavgen->_CLKratio = pWavgen->_FMCLK/MAXDACVAL;
 330:	8c 89       	ldd	r24, Y+20	; 0x14
 332:	9d 89       	ldd	r25, Y+21	; 0x15
 334:	ae 89       	ldd	r26, Y+22	; 0x16
 336:	bf 89       	ldd	r27, Y+23	; 0x17
 338:	bc 01       	movw	r22, r24
 33a:	cd 01       	movw	r24, r26
 33c:	05 2e       	mov	r0, r21
 33e:	5c e1       	ldi	r21, 0x1C	; 28
 340:	96 95       	lsr	r25
 342:	87 95       	ror	r24
 344:	77 95       	ror	r23
 346:	67 95       	ror	r22
 348:	5a 95       	dec	r21
 34a:	d1 f7       	brne	.-12     	; 0x340 <initGenerator+0x32>
 34c:	50 2d       	mov	r21, r0
 34e:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <__floatunsisf>
 352:	68 8f       	std	Y+24, r22	; 0x18
 354:	79 8f       	std	Y+25, r23	; 0x19
 356:	8a 8f       	std	Y+26, r24	; 0x1a
 358:	9b 8f       	std	Y+27, r25	; 0x1b
	writeControlRegister(pWavgen);
 35a:	ce 01       	movw	r24, r28
 35c:	0e 94 38 01 	call	0x270	; 0x270 <writeControlRegister>
}
 360:	df 91       	pop	r29
 362:	cf 91       	pop	r28
 364:	08 95       	ret

00000366 <setWaveform>:

void setWaveform(WAVGEN_t *pWavgen, waveforms_t waveform){
	switch(waveform){
 366:	61 30       	cpi	r22, 0x01	; 1
 368:	69 f0       	breq	.+26     	; 0x384 <setWaveform+0x1e>
 36a:	18 f0       	brcs	.+6      	; 0x372 <setWaveform+0xc>
 36c:	62 30       	cpi	r22, 0x02	; 2
 36e:	29 f0       	breq	.+10     	; 0x37a <setWaveform+0x14>
 370:	0d c0       	rjmp	.+26     	; 0x38c <setWaveform+0x26>
		case SINEWAVE: pWavgen->_OPBITEN = false; pWavgen->_mode = false; break;
 372:	fc 01       	movw	r30, r24
 374:	15 82       	std	Z+5, r1	; 0x05
 376:	17 82       	std	Z+7, r1	; 0x07
 378:	09 c0       	rjmp	.+18     	; 0x38c <setWaveform+0x26>
		case SQUAREWAVE: pWavgen->_OPBITEN = true; pWavgen->_mode = false; break;
 37a:	21 e0       	ldi	r18, 0x01	; 1
 37c:	fc 01       	movw	r30, r24
 37e:	25 83       	std	Z+5, r18	; 0x05
 380:	17 82       	std	Z+7, r1	; 0x07
 382:	04 c0       	rjmp	.+8      	; 0x38c <setWaveform+0x26>
		case TRIANGLEWAVE: pWavgen->_OPBITEN = false; pWavgen->_mode = true; break;
 384:	fc 01       	movw	r30, r24
 386:	15 82       	std	Z+5, r1	; 0x05
 388:	21 e0       	ldi	r18, 0x01	; 1
 38a:	27 83       	std	Z+7, r18	; 0x07
	}
	writeControlRegister(pWavgen);
 38c:	0e 94 38 01 	call	0x270	; 0x270 <writeControlRegister>
 390:	08 95       	ret

00000392 <main>:
#include <avr/io.h>
#include <util/delay.h>
#include "AD9833.h"

int main(void)
{
 392:	cf 93       	push	r28
 394:	df 93       	push	r29
 396:	cd b7       	in	r28, 0x3d	; 61
 398:	de b7       	in	r29, 0x3e	; 62
 39a:	6c 97       	sbiw	r28, 0x1c	; 28
 39c:	cd bf       	out	0x3d, r28	; 61
 39e:	de bf       	out	0x3e, r29	; 62
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3a0:	83 ef       	ldi	r24, 0xF3	; 243
 3a2:	91 e0       	ldi	r25, 0x01	; 1
 3a4:	01 97       	sbiw	r24, 0x01	; 1
 3a6:	f1 f7       	brne	.-4      	; 0x3a4 <main+0x12>
 3a8:	00 c0       	rjmp	.+0      	; 0x3aa <main+0x18>
 3aa:	00 00       	nop
	_delay_ms(1);
	WAVGEN_t ad9833;
	initGenerator(&ad9833);
 3ac:	ce 01       	movw	r24, r28
 3ae:	01 96       	adiw	r24, 0x01	; 1
 3b0:	0e 94 87 01 	call	0x30e	; 0x30e <initGenerator>
 3b4:	9f e7       	ldi	r25, 0x7F	; 127
 3b6:	2a e1       	ldi	r18, 0x1A	; 26
 3b8:	86 e0       	ldi	r24, 0x06	; 6
 3ba:	91 50       	subi	r25, 0x01	; 1
 3bc:	20 40       	sbci	r18, 0x00	; 0
 3be:	80 40       	sbci	r24, 0x00	; 0
 3c0:	e1 f7       	brne	.-8      	; 0x3ba <main+0x28>
 3c2:	00 c0       	rjmp	.+0      	; 0x3c4 <main+0x32>
 3c4:	00 00       	nop
	
    while (1) 
    {
		_delay_ms(1000);
		setFrequency(&ad9833, 100);
 3c6:	44 e6       	ldi	r20, 0x64	; 100
 3c8:	50 e0       	ldi	r21, 0x00	; 0
 3ca:	60 e0       	ldi	r22, 0x00	; 0
 3cc:	70 e0       	ldi	r23, 0x00	; 0
 3ce:	ce 01       	movw	r24, r28
 3d0:	01 96       	adiw	r24, 0x01	; 1
 3d2:	0e 94 0c 01 	call	0x218	; 0x218 <setFrequency>
		setWaveform(&ad9833, TRIANGLEWAVE);
 3d6:	61 e0       	ldi	r22, 0x01	; 1
 3d8:	ce 01       	movw	r24, r28
 3da:	01 96       	adiw	r24, 0x01	; 1
 3dc:	0e 94 b3 01 	call	0x366	; 0x366 <setWaveform>
 3e0:	9f e7       	ldi	r25, 0x7F	; 127
 3e2:	2a e1       	ldi	r18, 0x1A	; 26
 3e4:	86 e0       	ldi	r24, 0x06	; 6
 3e6:	91 50       	subi	r25, 0x01	; 1
 3e8:	20 40       	sbci	r18, 0x00	; 0
 3ea:	80 40       	sbci	r24, 0x00	; 0
 3ec:	e1 f7       	brne	.-8      	; 0x3e6 <main+0x54>
 3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <main+0x5e>
 3f0:	00 00       	nop
		_delay_ms(1000);
		setFrequency(&ad9833, 1000);
 3f2:	48 ee       	ldi	r20, 0xE8	; 232
 3f4:	53 e0       	ldi	r21, 0x03	; 3
 3f6:	60 e0       	ldi	r22, 0x00	; 0
 3f8:	70 e0       	ldi	r23, 0x00	; 0
 3fa:	ce 01       	movw	r24, r28
 3fc:	01 96       	adiw	r24, 0x01	; 1
 3fe:	0e 94 0c 01 	call	0x218	; 0x218 <setFrequency>
		setWaveform(&ad9833, SQUAREWAVE);
 402:	62 e0       	ldi	r22, 0x02	; 2
 404:	ce 01       	movw	r24, r28
 406:	01 96       	adiw	r24, 0x01	; 1
 408:	0e 94 b3 01 	call	0x366	; 0x366 <setWaveform>
 40c:	9f e7       	ldi	r25, 0x7F	; 127
 40e:	2a e1       	ldi	r18, 0x1A	; 26
 410:	86 e0       	ldi	r24, 0x06	; 6
 412:	91 50       	subi	r25, 0x01	; 1
 414:	20 40       	sbci	r18, 0x00	; 0
 416:	80 40       	sbci	r24, 0x00	; 0
 418:	e1 f7       	brne	.-8      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 41a:	00 c0       	rjmp	.+0      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 41c:	00 00       	nop
		_delay_ms(1000);
		setFrequency(&ad9833, 10000);
 41e:	40 e1       	ldi	r20, 0x10	; 16
 420:	57 e2       	ldi	r21, 0x27	; 39
 422:	60 e0       	ldi	r22, 0x00	; 0
 424:	70 e0       	ldi	r23, 0x00	; 0
 426:	ce 01       	movw	r24, r28
 428:	01 96       	adiw	r24, 0x01	; 1
 42a:	0e 94 0c 01 	call	0x218	; 0x218 <setFrequency>
		setWaveform(&ad9833, SINEWAVE);
 42e:	60 e0       	ldi	r22, 0x00	; 0
 430:	ce 01       	movw	r24, r28
 432:	01 96       	adiw	r24, 0x01	; 1
 434:	0e 94 b3 01 	call	0x366	; 0x366 <setWaveform>
 438:	bd cf       	rjmp	.-134    	; 0x3b4 <main+0x22>

0000043a <initSoftwareSpi>:
#define F_CPU 2000000UL 
#include <util/delay.h>
#include "SoftSpi.h"

void initSoftwareSpi(void){
	SCLKPORT.DIRSET = SCLKPIN;
 43a:	e0 e6       	ldi	r30, 0x60	; 96
 43c:	f6 e0       	ldi	r31, 0x06	; 6
 43e:	92 e0       	ldi	r25, 0x02	; 2
 440:	91 83       	std	Z+1, r25	; 0x01
	FSYNCPORT.DIRSET = FSYNCPIN;
 442:	84 e0       	ldi	r24, 0x04	; 4
 444:	81 83       	std	Z+1, r24	; 0x01
	SCLKPORT.OUTSET = SCLKPIN;
 446:	95 83       	std	Z+5, r25	; 0x05
	FSYNCPORT.OUTSET = FSYNCPIN;
 448:	85 83       	std	Z+5, r24	; 0x05
	SDATPORT.DIRSET = SDATPIN;
 44a:	81 e0       	ldi	r24, 0x01	; 1
 44c:	81 83       	std	Z+1, r24	; 0x01
 44e:	08 95       	ret

00000450 <softwareSpiWrite>:
}

void softwareSpiWrite(uint16_t data){
 450:	bc 01       	movw	r22, r24
	FSYNCPORT.OUTCLR = FSYNCPIN;
 452:	84 e0       	ldi	r24, 0x04	; 4
 454:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 458:	2f e0       	ldi	r18, 0x0F	; 15
 45a:	30 e0       	ldi	r19, 0x00	; 0
	for(uint8_t i = 0; i<16; i++){
		if((data>>(15-i)) & 0x0001) SDATPORT.OUTSET = SDATPIN;
		else SDATPORT.OUTCLR = SDATPIN;
 45c:	e0 e6       	ldi	r30, 0x60	; 96
 45e:	f6 e0       	ldi	r31, 0x06	; 6
 460:	81 e0       	ldi	r24, 0x01	; 1
		
		SCLKPORT.OUTCLR = SCLKPIN;
 462:	92 e0       	ldi	r25, 0x02	; 2
}

void softwareSpiWrite(uint16_t data){
	FSYNCPORT.OUTCLR = FSYNCPIN;
	for(uint8_t i = 0; i<16; i++){
		if((data>>(15-i)) & 0x0001) SDATPORT.OUTSET = SDATPIN;
 464:	ab 01       	movw	r20, r22
 466:	02 2e       	mov	r0, r18
 468:	02 c0       	rjmp	.+4      	; 0x46e <softwareSpiWrite+0x1e>
 46a:	56 95       	lsr	r21
 46c:	47 95       	ror	r20
 46e:	0a 94       	dec	r0
 470:	e2 f7       	brpl	.-8      	; 0x46a <softwareSpiWrite+0x1a>
 472:	40 ff       	sbrs	r20, 0
 474:	02 c0       	rjmp	.+4      	; 0x47a <softwareSpiWrite+0x2a>
 476:	85 83       	std	Z+5, r24	; 0x05
 478:	01 c0       	rjmp	.+2      	; 0x47c <softwareSpiWrite+0x2c>
		else SDATPORT.OUTCLR = SDATPIN;
 47a:	86 83       	std	Z+6, r24	; 0x06
		
		SCLKPORT.OUTCLR = SCLKPIN;
 47c:	96 83       	std	Z+6, r25	; 0x06
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 47e:	00 c0       	rjmp	.+0      	; 0x480 <softwareSpiWrite+0x30>
		_delay_us(1);
		SCLKPORT.OUTSET = SCLKPIN;
 480:	95 83       	std	Z+5, r25	; 0x05
 482:	21 50       	subi	r18, 0x01	; 1
 484:	31 09       	sbc	r19, r1
 486:	70 f7       	brcc	.-36     	; 0x464 <softwareSpiWrite+0x14>
	}
	FSYNCPORT.OUTSET = FSYNCPIN;
 488:	84 e0       	ldi	r24, 0x04	; 4
 48a:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
 48e:	08 95       	ret

00000490 <__divsf3>:
 490:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <__divsf3x>
 494:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__fp_round>
 498:	0e 94 36 03 	call	0x66c	; 0x66c <__fp_pscB>
 49c:	58 f0       	brcs	.+22     	; 0x4b4 <__divsf3+0x24>
 49e:	0e 94 2f 03 	call	0x65e	; 0x65e <__fp_pscA>
 4a2:	40 f0       	brcs	.+16     	; 0x4b4 <__divsf3+0x24>
 4a4:	29 f4       	brne	.+10     	; 0x4b0 <__divsf3+0x20>
 4a6:	5f 3f       	cpi	r21, 0xFF	; 255
 4a8:	29 f0       	breq	.+10     	; 0x4b4 <__divsf3+0x24>
 4aa:	0c 94 26 03 	jmp	0x64c	; 0x64c <__fp_inf>
 4ae:	51 11       	cpse	r21, r1
 4b0:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <__fp_szero>
 4b4:	0c 94 2c 03 	jmp	0x658	; 0x658 <__fp_nan>

000004b8 <__divsf3x>:
 4b8:	0e 94 4e 03 	call	0x69c	; 0x69c <__fp_split3>
 4bc:	68 f3       	brcs	.-38     	; 0x498 <__divsf3+0x8>

000004be <__divsf3_pse>:
 4be:	99 23       	and	r25, r25
 4c0:	b1 f3       	breq	.-20     	; 0x4ae <__divsf3+0x1e>
 4c2:	55 23       	and	r21, r21
 4c4:	91 f3       	breq	.-28     	; 0x4aa <__divsf3+0x1a>
 4c6:	95 1b       	sub	r25, r21
 4c8:	55 0b       	sbc	r21, r21
 4ca:	bb 27       	eor	r27, r27
 4cc:	aa 27       	eor	r26, r26
 4ce:	62 17       	cp	r22, r18
 4d0:	73 07       	cpc	r23, r19
 4d2:	84 07       	cpc	r24, r20
 4d4:	38 f0       	brcs	.+14     	; 0x4e4 <__divsf3_pse+0x26>
 4d6:	9f 5f       	subi	r25, 0xFF	; 255
 4d8:	5f 4f       	sbci	r21, 0xFF	; 255
 4da:	22 0f       	add	r18, r18
 4dc:	33 1f       	adc	r19, r19
 4de:	44 1f       	adc	r20, r20
 4e0:	aa 1f       	adc	r26, r26
 4e2:	a9 f3       	breq	.-22     	; 0x4ce <__divsf3_pse+0x10>
 4e4:	35 d0       	rcall	.+106    	; 0x550 <__divsf3_pse+0x92>
 4e6:	0e 2e       	mov	r0, r30
 4e8:	3a f0       	brmi	.+14     	; 0x4f8 <__divsf3_pse+0x3a>
 4ea:	e0 e8       	ldi	r30, 0x80	; 128
 4ec:	32 d0       	rcall	.+100    	; 0x552 <__divsf3_pse+0x94>
 4ee:	91 50       	subi	r25, 0x01	; 1
 4f0:	50 40       	sbci	r21, 0x00	; 0
 4f2:	e6 95       	lsr	r30
 4f4:	00 1c       	adc	r0, r0
 4f6:	ca f7       	brpl	.-14     	; 0x4ea <__divsf3_pse+0x2c>
 4f8:	2b d0       	rcall	.+86     	; 0x550 <__divsf3_pse+0x92>
 4fa:	fe 2f       	mov	r31, r30
 4fc:	29 d0       	rcall	.+82     	; 0x550 <__divsf3_pse+0x92>
 4fe:	66 0f       	add	r22, r22
 500:	77 1f       	adc	r23, r23
 502:	88 1f       	adc	r24, r24
 504:	bb 1f       	adc	r27, r27
 506:	26 17       	cp	r18, r22
 508:	37 07       	cpc	r19, r23
 50a:	48 07       	cpc	r20, r24
 50c:	ab 07       	cpc	r26, r27
 50e:	b0 e8       	ldi	r27, 0x80	; 128
 510:	09 f0       	breq	.+2      	; 0x514 <__divsf3_pse+0x56>
 512:	bb 0b       	sbc	r27, r27
 514:	80 2d       	mov	r24, r0
 516:	bf 01       	movw	r22, r30
 518:	ff 27       	eor	r31, r31
 51a:	93 58       	subi	r25, 0x83	; 131
 51c:	5f 4f       	sbci	r21, 0xFF	; 255
 51e:	3a f0       	brmi	.+14     	; 0x52e <__divsf3_pse+0x70>
 520:	9e 3f       	cpi	r25, 0xFE	; 254
 522:	51 05       	cpc	r21, r1
 524:	78 f0       	brcs	.+30     	; 0x544 <__divsf3_pse+0x86>
 526:	0c 94 26 03 	jmp	0x64c	; 0x64c <__fp_inf>
 52a:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <__fp_szero>
 52e:	5f 3f       	cpi	r21, 0xFF	; 255
 530:	e4 f3       	brlt	.-8      	; 0x52a <__divsf3_pse+0x6c>
 532:	98 3e       	cpi	r25, 0xE8	; 232
 534:	d4 f3       	brlt	.-12     	; 0x52a <__divsf3_pse+0x6c>
 536:	86 95       	lsr	r24
 538:	77 95       	ror	r23
 53a:	67 95       	ror	r22
 53c:	b7 95       	ror	r27
 53e:	f7 95       	ror	r31
 540:	9f 5f       	subi	r25, 0xFF	; 255
 542:	c9 f7       	brne	.-14     	; 0x536 <__divsf3_pse+0x78>
 544:	88 0f       	add	r24, r24
 546:	91 1d       	adc	r25, r1
 548:	96 95       	lsr	r25
 54a:	87 95       	ror	r24
 54c:	97 f9       	bld	r25, 7
 54e:	08 95       	ret
 550:	e1 e0       	ldi	r30, 0x01	; 1
 552:	66 0f       	add	r22, r22
 554:	77 1f       	adc	r23, r23
 556:	88 1f       	adc	r24, r24
 558:	bb 1f       	adc	r27, r27
 55a:	62 17       	cp	r22, r18
 55c:	73 07       	cpc	r23, r19
 55e:	84 07       	cpc	r24, r20
 560:	ba 07       	cpc	r27, r26
 562:	20 f0       	brcs	.+8      	; 0x56c <__divsf3_pse+0xae>
 564:	62 1b       	sub	r22, r18
 566:	73 0b       	sbc	r23, r19
 568:	84 0b       	sbc	r24, r20
 56a:	ba 0b       	sbc	r27, r26
 56c:	ee 1f       	adc	r30, r30
 56e:	88 f7       	brcc	.-30     	; 0x552 <__divsf3_pse+0x94>
 570:	e0 95       	com	r30
 572:	08 95       	ret

00000574 <__fixunssfsi>:
 574:	0e 94 56 03 	call	0x6ac	; 0x6ac <__fp_splitA>
 578:	88 f0       	brcs	.+34     	; 0x59c <__fixunssfsi+0x28>
 57a:	9f 57       	subi	r25, 0x7F	; 127
 57c:	98 f0       	brcs	.+38     	; 0x5a4 <__fixunssfsi+0x30>
 57e:	b9 2f       	mov	r27, r25
 580:	99 27       	eor	r25, r25
 582:	b7 51       	subi	r27, 0x17	; 23
 584:	b0 f0       	brcs	.+44     	; 0x5b2 <__fixunssfsi+0x3e>
 586:	e1 f0       	breq	.+56     	; 0x5c0 <__fixunssfsi+0x4c>
 588:	66 0f       	add	r22, r22
 58a:	77 1f       	adc	r23, r23
 58c:	88 1f       	adc	r24, r24
 58e:	99 1f       	adc	r25, r25
 590:	1a f0       	brmi	.+6      	; 0x598 <__fixunssfsi+0x24>
 592:	ba 95       	dec	r27
 594:	c9 f7       	brne	.-14     	; 0x588 <__fixunssfsi+0x14>
 596:	14 c0       	rjmp	.+40     	; 0x5c0 <__fixunssfsi+0x4c>
 598:	b1 30       	cpi	r27, 0x01	; 1
 59a:	91 f0       	breq	.+36     	; 0x5c0 <__fixunssfsi+0x4c>
 59c:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__fp_zero>
 5a0:	b1 e0       	ldi	r27, 0x01	; 1
 5a2:	08 95       	ret
 5a4:	0c 94 70 03 	jmp	0x6e0	; 0x6e0 <__fp_zero>
 5a8:	67 2f       	mov	r22, r23
 5aa:	78 2f       	mov	r23, r24
 5ac:	88 27       	eor	r24, r24
 5ae:	b8 5f       	subi	r27, 0xF8	; 248
 5b0:	39 f0       	breq	.+14     	; 0x5c0 <__fixunssfsi+0x4c>
 5b2:	b9 3f       	cpi	r27, 0xF9	; 249
 5b4:	cc f3       	brlt	.-14     	; 0x5a8 <__fixunssfsi+0x34>
 5b6:	86 95       	lsr	r24
 5b8:	77 95       	ror	r23
 5ba:	67 95       	ror	r22
 5bc:	b3 95       	inc	r27
 5be:	d9 f7       	brne	.-10     	; 0x5b6 <__fixunssfsi+0x42>
 5c0:	3e f4       	brtc	.+14     	; 0x5d0 <__fixunssfsi+0x5c>
 5c2:	90 95       	com	r25
 5c4:	80 95       	com	r24
 5c6:	70 95       	com	r23
 5c8:	61 95       	neg	r22
 5ca:	7f 4f       	sbci	r23, 0xFF	; 255
 5cc:	8f 4f       	sbci	r24, 0xFF	; 255
 5ce:	9f 4f       	sbci	r25, 0xFF	; 255
 5d0:	08 95       	ret

000005d2 <__floatunsisf>:
 5d2:	e8 94       	clt
 5d4:	09 c0       	rjmp	.+18     	; 0x5e8 <__floatsisf+0x12>

000005d6 <__floatsisf>:
 5d6:	97 fb       	bst	r25, 7
 5d8:	3e f4       	brtc	.+14     	; 0x5e8 <__floatsisf+0x12>
 5da:	90 95       	com	r25
 5dc:	80 95       	com	r24
 5de:	70 95       	com	r23
 5e0:	61 95       	neg	r22
 5e2:	7f 4f       	sbci	r23, 0xFF	; 255
 5e4:	8f 4f       	sbci	r24, 0xFF	; 255
 5e6:	9f 4f       	sbci	r25, 0xFF	; 255
 5e8:	99 23       	and	r25, r25
 5ea:	a9 f0       	breq	.+42     	; 0x616 <__floatsisf+0x40>
 5ec:	f9 2f       	mov	r31, r25
 5ee:	96 e9       	ldi	r25, 0x96	; 150
 5f0:	bb 27       	eor	r27, r27
 5f2:	93 95       	inc	r25
 5f4:	f6 95       	lsr	r31
 5f6:	87 95       	ror	r24
 5f8:	77 95       	ror	r23
 5fa:	67 95       	ror	r22
 5fc:	b7 95       	ror	r27
 5fe:	f1 11       	cpse	r31, r1
 600:	f8 cf       	rjmp	.-16     	; 0x5f2 <__floatsisf+0x1c>
 602:	fa f4       	brpl	.+62     	; 0x642 <__floatsisf+0x6c>
 604:	bb 0f       	add	r27, r27
 606:	11 f4       	brne	.+4      	; 0x60c <__floatsisf+0x36>
 608:	60 ff       	sbrs	r22, 0
 60a:	1b c0       	rjmp	.+54     	; 0x642 <__floatsisf+0x6c>
 60c:	6f 5f       	subi	r22, 0xFF	; 255
 60e:	7f 4f       	sbci	r23, 0xFF	; 255
 610:	8f 4f       	sbci	r24, 0xFF	; 255
 612:	9f 4f       	sbci	r25, 0xFF	; 255
 614:	16 c0       	rjmp	.+44     	; 0x642 <__floatsisf+0x6c>
 616:	88 23       	and	r24, r24
 618:	11 f0       	breq	.+4      	; 0x61e <__floatsisf+0x48>
 61a:	96 e9       	ldi	r25, 0x96	; 150
 61c:	11 c0       	rjmp	.+34     	; 0x640 <__floatsisf+0x6a>
 61e:	77 23       	and	r23, r23
 620:	21 f0       	breq	.+8      	; 0x62a <__floatsisf+0x54>
 622:	9e e8       	ldi	r25, 0x8E	; 142
 624:	87 2f       	mov	r24, r23
 626:	76 2f       	mov	r23, r22
 628:	05 c0       	rjmp	.+10     	; 0x634 <__floatsisf+0x5e>
 62a:	66 23       	and	r22, r22
 62c:	71 f0       	breq	.+28     	; 0x64a <__floatsisf+0x74>
 62e:	96 e8       	ldi	r25, 0x86	; 134
 630:	86 2f       	mov	r24, r22
 632:	70 e0       	ldi	r23, 0x00	; 0
 634:	60 e0       	ldi	r22, 0x00	; 0
 636:	2a f0       	brmi	.+10     	; 0x642 <__floatsisf+0x6c>
 638:	9a 95       	dec	r25
 63a:	66 0f       	add	r22, r22
 63c:	77 1f       	adc	r23, r23
 63e:	88 1f       	adc	r24, r24
 640:	da f7       	brpl	.-10     	; 0x638 <__floatsisf+0x62>
 642:	88 0f       	add	r24, r24
 644:	96 95       	lsr	r25
 646:	87 95       	ror	r24
 648:	97 f9       	bld	r25, 7
 64a:	08 95       	ret

0000064c <__fp_inf>:
 64c:	97 f9       	bld	r25, 7
 64e:	9f 67       	ori	r25, 0x7F	; 127
 650:	80 e8       	ldi	r24, 0x80	; 128
 652:	70 e0       	ldi	r23, 0x00	; 0
 654:	60 e0       	ldi	r22, 0x00	; 0
 656:	08 95       	ret

00000658 <__fp_nan>:
 658:	9f ef       	ldi	r25, 0xFF	; 255
 65a:	80 ec       	ldi	r24, 0xC0	; 192
 65c:	08 95       	ret

0000065e <__fp_pscA>:
 65e:	00 24       	eor	r0, r0
 660:	0a 94       	dec	r0
 662:	16 16       	cp	r1, r22
 664:	17 06       	cpc	r1, r23
 666:	18 06       	cpc	r1, r24
 668:	09 06       	cpc	r0, r25
 66a:	08 95       	ret

0000066c <__fp_pscB>:
 66c:	00 24       	eor	r0, r0
 66e:	0a 94       	dec	r0
 670:	12 16       	cp	r1, r18
 672:	13 06       	cpc	r1, r19
 674:	14 06       	cpc	r1, r20
 676:	05 06       	cpc	r0, r21
 678:	08 95       	ret

0000067a <__fp_round>:
 67a:	09 2e       	mov	r0, r25
 67c:	03 94       	inc	r0
 67e:	00 0c       	add	r0, r0
 680:	11 f4       	brne	.+4      	; 0x686 <__fp_round+0xc>
 682:	88 23       	and	r24, r24
 684:	52 f0       	brmi	.+20     	; 0x69a <__fp_round+0x20>
 686:	bb 0f       	add	r27, r27
 688:	40 f4       	brcc	.+16     	; 0x69a <__fp_round+0x20>
 68a:	bf 2b       	or	r27, r31
 68c:	11 f4       	brne	.+4      	; 0x692 <__fp_round+0x18>
 68e:	60 ff       	sbrs	r22, 0
 690:	04 c0       	rjmp	.+8      	; 0x69a <__fp_round+0x20>
 692:	6f 5f       	subi	r22, 0xFF	; 255
 694:	7f 4f       	sbci	r23, 0xFF	; 255
 696:	8f 4f       	sbci	r24, 0xFF	; 255
 698:	9f 4f       	sbci	r25, 0xFF	; 255
 69a:	08 95       	ret

0000069c <__fp_split3>:
 69c:	57 fd       	sbrc	r21, 7
 69e:	90 58       	subi	r25, 0x80	; 128
 6a0:	44 0f       	add	r20, r20
 6a2:	55 1f       	adc	r21, r21
 6a4:	59 f0       	breq	.+22     	; 0x6bc <__fp_splitA+0x10>
 6a6:	5f 3f       	cpi	r21, 0xFF	; 255
 6a8:	71 f0       	breq	.+28     	; 0x6c6 <__fp_splitA+0x1a>
 6aa:	47 95       	ror	r20

000006ac <__fp_splitA>:
 6ac:	88 0f       	add	r24, r24
 6ae:	97 fb       	bst	r25, 7
 6b0:	99 1f       	adc	r25, r25
 6b2:	61 f0       	breq	.+24     	; 0x6cc <__fp_splitA+0x20>
 6b4:	9f 3f       	cpi	r25, 0xFF	; 255
 6b6:	79 f0       	breq	.+30     	; 0x6d6 <__fp_splitA+0x2a>
 6b8:	87 95       	ror	r24
 6ba:	08 95       	ret
 6bc:	12 16       	cp	r1, r18
 6be:	13 06       	cpc	r1, r19
 6c0:	14 06       	cpc	r1, r20
 6c2:	55 1f       	adc	r21, r21
 6c4:	f2 cf       	rjmp	.-28     	; 0x6aa <__fp_split3+0xe>
 6c6:	46 95       	lsr	r20
 6c8:	f1 df       	rcall	.-30     	; 0x6ac <__fp_splitA>
 6ca:	08 c0       	rjmp	.+16     	; 0x6dc <__fp_splitA+0x30>
 6cc:	16 16       	cp	r1, r22
 6ce:	17 06       	cpc	r1, r23
 6d0:	18 06       	cpc	r1, r24
 6d2:	99 1f       	adc	r25, r25
 6d4:	f1 cf       	rjmp	.-30     	; 0x6b8 <__fp_splitA+0xc>
 6d6:	86 95       	lsr	r24
 6d8:	71 05       	cpc	r23, r1
 6da:	61 05       	cpc	r22, r1
 6dc:	08 94       	sec
 6de:	08 95       	ret

000006e0 <__fp_zero>:
 6e0:	e8 94       	clt

000006e2 <__fp_szero>:
 6e2:	bb 27       	eor	r27, r27
 6e4:	66 27       	eor	r22, r22
 6e6:	77 27       	eor	r23, r23
 6e8:	cb 01       	movw	r24, r22
 6ea:	97 f9       	bld	r25, 7
 6ec:	08 95       	ret

000006ee <_exit>:
 6ee:	f8 94       	cli

000006f0 <__stop_program>:
 6f0:	ff cf       	rjmp	.-2      	; 0x6f0 <__stop_program>
