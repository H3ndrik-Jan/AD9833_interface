
ad9833interface.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008c4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  00000938  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000197  00802000  00802000  00000938  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000938  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000968  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  000009a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004ff9  00000000  00000000  00000ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000397d  00000000  00000000  00005aa9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e12  00000000  00000000  00009426  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b8  00000000  00000000  0000a238  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002fde  00000000  00000000  0000a4f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bf5  00000000  00000000  0000d4ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  0000e0c3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
   8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
   c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  10:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  14:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  18:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  1c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  20:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  24:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  28:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  2c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  30:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  34:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  38:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  3c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  40:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  44:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  48:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  4c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  50:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  54:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  58:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  5c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  60:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  64:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  68:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  6c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  70:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  74:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  78:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  7c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  80:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  84:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  88:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  8c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  90:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  94:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  98:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  9c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  ac:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  bc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  c8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  dc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  ec:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  fc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 100:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 104:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 108:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 10c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 110:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 114:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 118:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 11c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 120:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 124:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 128:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 12c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 130:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 134:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 138:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 13c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 140:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 144:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 148:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 14c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 150:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 154:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 158:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 15c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 160:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 164:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 168:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 16c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 170:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 174:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 178:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 17c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 180:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 184:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 188:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 18c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 190:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 194:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 198:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 19c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1a0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1ac:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1bc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1dc:	0c 94 8b 02 	jmp	0x516	; 0x516 <__vector_119>
 1e0:	0c 94 b3 02 	jmp	0x566	; 0x566 <__vector_120>
 1e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1e8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1ec:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1f0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1f4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1f8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e5       	ldi	r29, 0x5F	; 95
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60

0000020c <__do_copy_data>:
 20c:	10 e2       	ldi	r17, 0x20	; 32
 20e:	a0 e0       	ldi	r26, 0x00	; 0
 210:	b0 e2       	ldi	r27, 0x20	; 32
 212:	e4 ec       	ldi	r30, 0xC4	; 196
 214:	f8 e0       	ldi	r31, 0x08	; 8
 216:	00 e0       	ldi	r16, 0x00	; 0
 218:	0b bf       	out	0x3b, r16	; 59
 21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
 21c:	07 90       	elpm	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	a0 30       	cpi	r26, 0x00	; 0
 222:	b1 07       	cpc	r27, r17
 224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>

00000226 <__do_clear_bss>:
 226:	21 e2       	ldi	r18, 0x21	; 33
 228:	a0 e0       	ldi	r26, 0x00	; 0
 22a:	b0 e2       	ldi	r27, 0x20	; 32
 22c:	01 c0       	rjmp	.+2      	; 0x230 <.do_clear_bss_start>

0000022e <.do_clear_bss_loop>:
 22e:	1d 92       	st	X+, r1

00000230 <.do_clear_bss_start>:
 230:	a7 39       	cpi	r26, 0x97	; 151
 232:	b2 07       	cpc	r27, r18
 234:	e1 f7       	brne	.-8      	; 0x22e <.do_clear_bss_loop>
 236:	0e 94 0b 02 	call	0x416	; 0x416 <main>
 23a:	0c 94 60 04 	jmp	0x8c0	; 0x8c0 <_exit>

0000023e <__bad_interrupt>:
 23e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000242 <writeControlRegister>:
	softwareSpiWrite(0x8000 | ((pWavgen->_frequencyRegister >> 14) & 0x3FFF));	//MSB
		pWavgen->_FSELECT = false;
		writeControlRegister(pWavgen);
}

void writeControlRegister(WAVGEN_t *pWavgen){
 242:	fc 01       	movw	r30, r24
	pWavgen->_controlRegister = 0x0000 |
 244:	87 81       	ldd	r24, Z+7	; 0x07
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	9c 01       	movw	r18, r24
 24a:	22 0f       	add	r18, r18
 24c:	33 1f       	adc	r19, r19
 24e:	96 81       	ldd	r25, Z+6	; 0x06
 250:	89 2f       	mov	r24, r25
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	88 0f       	add	r24, r24
 256:	99 1f       	adc	r25, r25
 258:	88 0f       	add	r24, r24
 25a:	99 1f       	adc	r25, r25
 25c:	88 0f       	add	r24, r24
 25e:	99 1f       	adc	r25, r25
 260:	82 2b       	or	r24, r18
 262:	93 2b       	or	r25, r19
 264:	25 81       	ldd	r18, Z+5	; 0x05
 266:	40 e2       	ldi	r20, 0x20	; 32
 268:	24 9f       	mul	r18, r20
 26a:	90 01       	movw	r18, r0
 26c:	11 24       	eor	r1, r1
 26e:	82 2b       	or	r24, r18
 270:	93 2b       	or	r25, r19
 272:	22 85       	ldd	r18, Z+10	; 0x0a
 274:	40 e4       	ldi	r20, 0x40	; 64
 276:	24 9f       	mul	r18, r20
 278:	90 01       	movw	r18, r0
 27a:	11 24       	eor	r1, r1
 27c:	82 2b       	or	r24, r18
 27e:	93 2b       	or	r25, r19
 280:	23 85       	ldd	r18, Z+11	; 0x0b
 282:	40 e8       	ldi	r20, 0x80	; 128
 284:	24 9f       	mul	r18, r20
 286:	90 01       	movw	r18, r0
 288:	11 24       	eor	r1, r1
 28a:	82 2b       	or	r24, r18
 28c:	93 2b       	or	r25, r19
 28e:	24 81       	ldd	r18, Z+4	; 0x04
 290:	92 2b       	or	r25, r18
 292:	21 85       	ldd	r18, Z+9	; 0x09
 294:	30 e0       	ldi	r19, 0x00	; 0
 296:	32 2f       	mov	r19, r18
 298:	22 27       	eor	r18, r18
 29a:	33 0f       	add	r19, r19
 29c:	33 0f       	add	r19, r19
 29e:	82 2b       	or	r24, r18
 2a0:	93 2b       	or	r25, r19
 2a2:	20 85       	ldd	r18, Z+8	; 0x08
 2a4:	30 e0       	ldi	r19, 0x00	; 0
 2a6:	32 2f       	mov	r19, r18
 2a8:	22 27       	eor	r18, r18
 2aa:	33 0f       	add	r19, r19
 2ac:	33 0f       	add	r19, r19
 2ae:	33 0f       	add	r19, r19
 2b0:	82 2b       	or	r24, r18
 2b2:	93 2b       	or	r25, r19
 2b4:	23 81       	ldd	r18, Z+3	; 0x03
 2b6:	30 e0       	ldi	r19, 0x00	; 0
 2b8:	32 2f       	mov	r19, r18
 2ba:	22 27       	eor	r18, r18
 2bc:	32 95       	swap	r19
 2be:	30 7f       	andi	r19, 0xF0	; 240
 2c0:	82 2b       	or	r24, r18
 2c2:	93 2b       	or	r25, r19
 2c4:	22 81       	ldd	r18, Z+2	; 0x02
 2c6:	30 e0       	ldi	r19, 0x00	; 0
 2c8:	32 2f       	mov	r19, r18
 2ca:	22 27       	eor	r18, r18
 2cc:	32 95       	swap	r19
 2ce:	33 0f       	add	r19, r19
 2d0:	30 7e       	andi	r19, 0xE0	; 224
 2d2:	82 2b       	or	r24, r18
 2d4:	93 2b       	or	r25, r19
 2d6:	80 83       	st	Z, r24
 2d8:	91 83       	std	Z+1, r25	; 0x01
	(pWavgen->_OPBITEN << 5) | (pWavgen->_SLEEP1 << 6) |
	(pWavgen->_SLEEP12 << 7) | (pWavgen->_reset << 8) |
	(pWavgen->_PSELECT << 10) |(pWavgen->_FSELECT << 11) |
	(pWavgen->_HLB << 12) | (pWavgen->_B28BIT << 13);
										
	softwareSpiWrite(pWavgen->_controlRegister);
 2da:	0e 94 ef 02 	call	0x5de	; 0x5de <softwareSpiWrite>
 2de:	08 95       	ret

000002e0 <initGenerator>:
 *  Author: Hendrik-Jan
 */ 
#include <math.h>
#include "AD9833.h"

void initGenerator(WAVGEN_t *pWavgen){
 2e0:	cf 93       	push	r28
 2e2:	df 93       	push	r29
 2e4:	ec 01       	movw	r28, r24
	initSoftwareSpi();
 2e6:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <initSoftwareSpi>
	pWavgen->_controlRegister = 0; 
 2ea:	18 82       	st	Y, r1
 2ec:	19 82       	std	Y+1, r1	; 0x01
	pWavgen->_B28BIT = true;
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	8a 83       	std	Y+2, r24	; 0x02
	pWavgen->_HLB = false;
 2f2:	1b 82       	std	Y+3, r1	; 0x03
	pWavgen->_reset = false;
 2f4:	1c 82       	std	Y+4, r1	; 0x04
	pWavgen->_OPBITEN = false;
 2f6:	1d 82       	std	Y+5, r1	; 0x05
	pWavgen->_DIV2 = true;
 2f8:	8e 83       	std	Y+6, r24	; 0x06
	
	pWavgen->_FSELECT = false;
 2fa:	18 86       	std	Y+8, r1	; 0x08
	pWavgen->_PSELECT = false;
 2fc:	19 86       	std	Y+9, r1	; 0x09
	pWavgen->_SLEEP1 = false;
 2fe:	1a 86       	std	Y+10, r1	; 0x0a
	pWavgen->_SLEEP12 = false;
 300:	1b 86       	std	Y+11, r1	; 0x0b
	
	pWavgen->_FMCLK = 25000000UL;
 302:	80 e4       	ldi	r24, 0x40	; 64
 304:	98 e7       	ldi	r25, 0x78	; 120
 306:	ad e7       	ldi	r26, 0x7D	; 125
 308:	b1 e0       	ldi	r27, 0x01	; 1
 30a:	8c 8b       	std	Y+20, r24	; 0x14
 30c:	9d 8b       	std	Y+21, r25	; 0x15
 30e:	ae 8b       	std	Y+22, r26	; 0x16
 310:	bf 8b       	std	Y+23, r27	; 0x17
	
	
	pWavgen->_CLKratio = (double)pWavgen->_FMCLK/MAXDACVAL;
 312:	80 e2       	ldi	r24, 0x20	; 32
 314:	9c eb       	ldi	r25, 0xBC	; 188
 316:	ae eb       	ldi	r26, 0xBE	; 190
 318:	bd e3       	ldi	r27, 0x3D	; 61
 31a:	88 8f       	std	Y+24, r24	; 0x18
 31c:	99 8f       	std	Y+25, r25	; 0x19
 31e:	aa 8f       	std	Y+26, r26	; 0x1a
 320:	bb 8f       	std	Y+27, r27	; 0x1b
	writeControlRegister(pWavgen);
 322:	ce 01       	movw	r24, r28
 324:	0e 94 21 01 	call	0x242	; 0x242 <writeControlRegister>
}
 328:	df 91       	pop	r29
 32a:	cf 91       	pop	r28
 32c:	08 95       	ret

0000032e <setWaveform>:

void setWaveform(WAVGEN_t *pWavgen, waveforms_t waveform){
	switch(waveform){
 32e:	61 30       	cpi	r22, 0x01	; 1
 330:	69 f0       	breq	.+26     	; 0x34c <setWaveform+0x1e>
 332:	18 f0       	brcs	.+6      	; 0x33a <setWaveform+0xc>
 334:	62 30       	cpi	r22, 0x02	; 2
 336:	29 f0       	breq	.+10     	; 0x342 <setWaveform+0x14>
 338:	0d c0       	rjmp	.+26     	; 0x354 <setWaveform+0x26>
		case SINEWAVE: pWavgen->_OPBITEN = false; pWavgen->_mode = false; break;
 33a:	fc 01       	movw	r30, r24
 33c:	15 82       	std	Z+5, r1	; 0x05
 33e:	17 82       	std	Z+7, r1	; 0x07
 340:	09 c0       	rjmp	.+18     	; 0x354 <setWaveform+0x26>
		case SQUAREWAVE: pWavgen->_OPBITEN = true; pWavgen->_mode = false; break;
 342:	21 e0       	ldi	r18, 0x01	; 1
 344:	fc 01       	movw	r30, r24
 346:	25 83       	std	Z+5, r18	; 0x05
 348:	17 82       	std	Z+7, r1	; 0x07
 34a:	04 c0       	rjmp	.+8      	; 0x354 <setWaveform+0x26>
		case TRIANGLEWAVE: pWavgen->_OPBITEN = false; pWavgen->_mode = true; break;
 34c:	fc 01       	movw	r30, r24
 34e:	15 82       	std	Z+5, r1	; 0x05
 350:	21 e0       	ldi	r18, 0x01	; 1
 352:	27 83       	std	Z+7, r18	; 0x07
	}
	writeControlRegister(pWavgen);
 354:	0e 94 21 01 	call	0x242	; 0x242 <writeControlRegister>
 358:	08 95       	ret

0000035a <setFrequency>:
}

void setFrequency(WAVGEN_t *pWavgen, uint32_t frequency){
 35a:	cf 93       	push	r28
 35c:	df 93       	push	r29
 35e:	ec 01       	movw	r28, r24
 	pWavgen->_frequencyRegister = (uint32_t)frequency/pWavgen->_CLKratio;
 360:	cb 01       	movw	r24, r22
 362:	ba 01       	movw	r22, r20
 364:	0e 94 b0 03 	call	0x760	; 0x760 <__floatunsisf>
 368:	28 8d       	ldd	r18, Y+24	; 0x18
 36a:	39 8d       	ldd	r19, Y+25	; 0x19
 36c:	4a 8d       	ldd	r20, Y+26	; 0x1a
 36e:	5b 8d       	ldd	r21, Y+27	; 0x1b
 370:	0e 94 0f 03 	call	0x61e	; 0x61e <__divsf3>
 374:	0e 94 81 03 	call	0x702	; 0x702 <__fixunssfsi>
 378:	6c 87       	std	Y+12, r22	; 0x0c
 37a:	7d 87       	std	Y+13, r23	; 0x0d
 37c:	8e 87       	std	Y+14, r24	; 0x0e
 37e:	9f 87       	std	Y+15, r25	; 0x0f
	 
	 pWavgen->_FSELECT = true;
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	88 87       	std	Y+8, r24	; 0x08
	 writeControlRegister(pWavgen);
 384:	ce 01       	movw	r24, r28
 386:	0e 94 21 01 	call	0x242	; 0x242 <writeControlRegister>
	 softwareSpiWrite(0x4000 | (pWavgen->_frequencyRegister & 0x3FFF));	//LSB
 38a:	8c 85       	ldd	r24, Y+12	; 0x0c
 38c:	9d 85       	ldd	r25, Y+13	; 0x0d
 38e:	9f 73       	andi	r25, 0x3F	; 63
 390:	90 64       	ori	r25, 0x40	; 64
 392:	0e 94 ef 02 	call	0x5de	; 0x5de <softwareSpiWrite>
	 softwareSpiWrite(0x4000 | ((pWavgen->_frequencyRegister >> 14) & 0x3FFF));	//MSB
 396:	8c 85       	ldd	r24, Y+12	; 0x0c
 398:	9d 85       	ldd	r25, Y+13	; 0x0d
 39a:	ae 85       	ldd	r26, Y+14	; 0x0e
 39c:	bf 85       	ldd	r27, Y+15	; 0x0f
 39e:	07 2e       	mov	r0, r23
 3a0:	7e e0       	ldi	r23, 0x0E	; 14
 3a2:	b6 95       	lsr	r27
 3a4:	a7 95       	ror	r26
 3a6:	97 95       	ror	r25
 3a8:	87 95       	ror	r24
 3aa:	7a 95       	dec	r23
 3ac:	d1 f7       	brne	.-12     	; 0x3a2 <setFrequency+0x48>
 3ae:	70 2d       	mov	r23, r0
 3b0:	9f 73       	andi	r25, 0x3F	; 63
 3b2:	90 64       	ori	r25, 0x40	; 64
 3b4:	0e 94 ef 02 	call	0x5de	; 0x5de <softwareSpiWrite>
	softwareSpiWrite(0x8000 | (pWavgen->_frequencyRegister & 0x3FFF));	//LSB
 3b8:	8c 85       	ldd	r24, Y+12	; 0x0c
 3ba:	9d 85       	ldd	r25, Y+13	; 0x0d
 3bc:	9f 73       	andi	r25, 0x3F	; 63
 3be:	90 68       	ori	r25, 0x80	; 128
 3c0:	0e 94 ef 02 	call	0x5de	; 0x5de <softwareSpiWrite>
	softwareSpiWrite(0x8000 | ((pWavgen->_frequencyRegister >> 14) & 0x3FFF));	//MSB
 3c4:	8c 85       	ldd	r24, Y+12	; 0x0c
 3c6:	9d 85       	ldd	r25, Y+13	; 0x0d
 3c8:	ae 85       	ldd	r26, Y+14	; 0x0e
 3ca:	bf 85       	ldd	r27, Y+15	; 0x0f
 3cc:	07 2e       	mov	r0, r23
 3ce:	7e e0       	ldi	r23, 0x0E	; 14
 3d0:	b6 95       	lsr	r27
 3d2:	a7 95       	ror	r26
 3d4:	97 95       	ror	r25
 3d6:	87 95       	ror	r24
 3d8:	7a 95       	dec	r23
 3da:	d1 f7       	brne	.-12     	; 0x3d0 <setFrequency+0x76>
 3dc:	70 2d       	mov	r23, r0
 3de:	9f 73       	andi	r25, 0x3F	; 63
 3e0:	90 68       	ori	r25, 0x80	; 128
 3e2:	0e 94 ef 02 	call	0x5de	; 0x5de <softwareSpiWrite>
		pWavgen->_FSELECT = false;
 3e6:	18 86       	std	Y+8, r1	; 0x08
		writeControlRegister(pWavgen);
 3e8:	ce 01       	movw	r24, r28
 3ea:	0e 94 21 01 	call	0x242	; 0x242 <writeControlRegister>
}
 3ee:	df 91       	pop	r29
 3f0:	cf 91       	pop	r28
 3f2:	08 95       	ret

000003f4 <initADC>:
		}
    }
}

void initADC(void){
	PORTA.DIRCLR = PIN0_bm; 
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x700602>
	ADCA.CTRLB = ADC_FREERUN_bm | ADC_RESOLUTION_12BIT_gc;
 3fa:	e0 e0       	ldi	r30, 0x00	; 0
 3fc:	f2 e0       	ldi	r31, 0x02	; 2
 3fe:	98 e0       	ldi	r25, 0x08	; 8
 400:	91 83       	std	Z+1, r25	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_INTVCC_gc;
 402:	90 e1       	ldi	r25, 0x10	; 16
 404:	92 83       	std	Z+2, r25	; 0x02
	ADCA.EVCTRL = ADC_SWEEP0_bm;
 406:	90 e4       	ldi	r25, 0x40	; 64
 408:	93 83       	std	Z+3, r25	; 0x03

	ADCA.PRESCALER = ADC_PRESCALER_DIV512_gc;
 40a:	97 e0       	ldi	r25, 0x07	; 7
 40c:	94 83       	std	Z+4, r25	; 0x04
	ADCA.CH0.CTRL = ADC_CH_INPUTMODE_SINGLEENDED_gc;
 40e:	80 a3       	std	Z+32, r24	; 0x20
	ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN0_gc;
 410:	11 a2       	std	Z+33, r1	; 0x21
	ADCA.CTRLA = ADC_ENABLE_bm;
 412:	80 83       	st	Z, r24
 414:	08 95       	ret

00000416 <main>:

#define AVGSAMPLES 100
#define MAXMISMATCHES 250

int main(void)
{
 416:	cf 93       	push	r28
 418:	df 93       	push	r29
 41a:	cd b7       	in	r28, 0x3d	; 61
 41c:	de b7       	in	r29, 0x3e	; 62
 41e:	6c 97       	sbiw	r28, 0x1c	; 28
 420:	cd bf       	out	0x3d, r28	; 61
 422:	de bf       	out	0x3e, r29	; 62
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 424:	83 ef       	ldi	r24, 0xF3	; 243
 426:	91 e0       	ldi	r25, 0x01	; 1
 428:	01 97       	sbiw	r24, 0x01	; 1
 42a:	f1 f7       	brne	.-4      	; 0x428 <main+0x12>
 42c:	00 c0       	rjmp	.+0      	; 0x42e <main+0x18>
 42e:	00 00       	nop
	_delay_ms(1);
	WAVGEN_t ad9833;
	initGenerator(&ad9833);
 430:	ce 01       	movw	r24, r28
 432:	01 96       	adiw	r24, 0x01	; 1
 434:	0e 94 70 01 	call	0x2e0	; 0x2e0 <initGenerator>
	setWaveform(&ad9833, TRIANGLEWAVE);
 438:	61 e0       	ldi	r22, 0x01	; 1
 43a:	ce 01       	movw	r24, r28
 43c:	01 96       	adiw	r24, 0x01	; 1
 43e:	0e 94 97 01 	call	0x32e	; 0x32e <setWaveform>
	initADC();
 442:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <initADC>
	
	static uint16_t lastMeasurements[AVGSAMPLES];
    while (1) 
    {
		
		if((ADCA.CH0.INTFLAGS & ADC_CH_CHIF_bm)){
 446:	c1 2c       	mov	r12, r1
 448:	68 94       	set
 44a:	dd 24       	eor	r13, r13
 44c:	d1 f8       	bld	r13, 1
			lastMeasurements[0] = ADCA.CH0.RES;
 44e:	03 e0       	ldi	r16, 0x03	; 3
 450:	10 e2       	ldi	r17, 0x20	; 32
			ADCA.CH0.INTFLAGS = ADC_CH_CHIF_bm;
 452:	77 24       	eor	r7, r7
 454:	73 94       	inc	r7
 456:	0f 2e       	mov	r0, r31
 458:	fb ec       	ldi	r31, 0xCB	; 203
 45a:	ef 2e       	mov	r14, r31
 45c:	f0 e2       	ldi	r31, 0x20	; 32
 45e:	ff 2e       	mov	r15, r31
 460:	f0 2d       	mov	r31, r0
			
			uint32_t average = 0;
			for(uint8_t i = 0; i< AVGSAMPLES; i++){
				average+=lastMeasurements[i];
			}
			average/=AVGSAMPLES;
 462:	0f 2e       	mov	r0, r31
 464:	f4 e6       	ldi	r31, 0x64	; 100
 466:	2f 2e       	mov	r2, r31
 468:	31 2c       	mov	r3, r1
 46a:	41 2c       	mov	r4, r1
 46c:	51 2c       	mov	r5, r1
 46e:	f0 2d       	mov	r31, r0
	
	static uint16_t lastMeasurements[AVGSAMPLES];
    while (1) 
    {
		
		if((ADCA.CH0.INTFLAGS & ADC_CH_CHIF_bm)){
 470:	f6 01       	movw	r30, r12
 472:	83 a1       	ldd	r24, Z+35	; 0x23
 474:	80 ff       	sbrs	r24, 0
 476:	fc cf       	rjmp	.-8      	; 0x470 <main+0x5a>
			lastMeasurements[0] = ADCA.CH0.RES;
 478:	84 a1       	ldd	r24, Z+36	; 0x24
 47a:	95 a1       	ldd	r25, Z+37	; 0x25
 47c:	f8 01       	movw	r30, r16
 47e:	80 83       	st	Z, r24
 480:	91 83       	std	Z+1, r25	; 0x01
			ADCA.CH0.INTFLAGS = ADC_CH_CHIF_bm;
 482:	f6 01       	movw	r30, r12
 484:	73 a2       	std	Z+35, r7	; 0x23
 486:	e3 e0       	ldi	r30, 0x03	; 3
 488:	f0 e2       	ldi	r31, 0x20	; 32
			
			uint32_t average = 0;
 48a:	40 e0       	ldi	r20, 0x00	; 0
 48c:	50 e0       	ldi	r21, 0x00	; 0
 48e:	ba 01       	movw	r22, r20
			for(uint8_t i = 0; i< AVGSAMPLES; i++){
				average+=lastMeasurements[i];
 490:	81 91       	ld	r24, Z+
 492:	91 91       	ld	r25, Z+
 494:	48 0f       	add	r20, r24
 496:	59 1f       	adc	r21, r25
 498:	61 1d       	adc	r22, r1
 49a:	71 1d       	adc	r23, r1
		if((ADCA.CH0.INTFLAGS & ADC_CH_CHIF_bm)){
			lastMeasurements[0] = ADCA.CH0.RES;
			ADCA.CH0.INTFLAGS = ADC_CH_CHIF_bm;
			
			uint32_t average = 0;
			for(uint8_t i = 0; i< AVGSAMPLES; i++){
 49c:	ee 16       	cp	r14, r30
 49e:	ff 06       	cpc	r15, r31
 4a0:	b9 f7       	brne	.-18     	; 0x490 <main+0x7a>
				average+=lastMeasurements[i];
			}
			average/=AVGSAMPLES;
 4a2:	cb 01       	movw	r24, r22
 4a4:	ba 01       	movw	r22, r20
 4a6:	a2 01       	movw	r20, r4
 4a8:	91 01       	movw	r18, r2
 4aa:	0e 94 3e 04 	call	0x87c	; 0x87c <__udivmodsi4>
 4ae:	49 01       	movw	r8, r18
 4b0:	5a 01       	movw	r10, r20
			
			static uint8_t misMatchCount;
			static uint16_t dacValue = 0;
			
			if(average != dacValue){
 4b2:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <dacValue.4192>
 4b6:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <dacValue.4192+0x1>
 4ba:	a0 e0       	ldi	r26, 0x00	; 0
 4bc:	b0 e0       	ldi	r27, 0x00	; 0
 4be:	28 17       	cp	r18, r24
 4c0:	39 07       	cpc	r19, r25
 4c2:	4a 07       	cpc	r20, r26
 4c4:	5b 07       	cpc	r21, r27
 4c6:	41 f0       	breq	.+16     	; 0x4d8 <main+0xc2>
				misMatchCount++;
 4c8:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_end>
 4cc:	8f 5f       	subi	r24, 0xFF	; 255
 4ce:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_end>
			} else{
				misMatchCount = 0;
			}
			
			if(misMatchCount>MAXMISMATCHES){
 4d2:	8b 3f       	cpi	r24, 0xFB	; 251
 4d4:	b0 f0       	brcs	.+44     	; 0x502 <main+0xec>
 4d6:	03 c0       	rjmp	.+6      	; 0x4de <main+0xc8>
			static uint16_t dacValue = 0;
			
			if(average != dacValue){
				misMatchCount++;
			} else{
				misMatchCount = 0;
 4d8:	10 92 00 20 	sts	0x2000, r1	; 0x802000 <__data_end>
 4dc:	12 c0       	rjmp	.+36     	; 0x502 <main+0xec>
			}
			
			if(misMatchCount>MAXMISMATCHES){
				setFrequency(&ad9833, (average-190)*2);
 4de:	ba 01       	movw	r22, r20
 4e0:	a9 01       	movw	r20, r18
 4e2:	4e 5b       	subi	r20, 0xBE	; 190
 4e4:	51 09       	sbc	r21, r1
 4e6:	61 09       	sbc	r22, r1
 4e8:	70 48       	sbci	r23, 0x80	; 128
 4ea:	44 0f       	add	r20, r20
 4ec:	55 1f       	adc	r21, r21
 4ee:	66 1f       	adc	r22, r22
 4f0:	77 1f       	adc	r23, r23
 4f2:	ce 01       	movw	r24, r28
 4f4:	01 96       	adiw	r24, 0x01	; 1
 4f6:	0e 94 ad 01 	call	0x35a	; 0x35a <setFrequency>
				dacValue = average;
 4fa:	80 92 01 20 	sts	0x2001, r8	; 0x802001 <dacValue.4192>
 4fe:	90 92 02 20 	sts	0x2002, r9	; 0x802002 <dacValue.4192+0x1>
 502:	e9 ec       	ldi	r30, 0xC9	; 201
 504:	f0 e2       	ldi	r31, 0x20	; 32
			}

			for(uint8_t i = AVGSAMPLES-1; i>0; i--){
				lastMeasurements[i] = lastMeasurements[i-1];
 506:	92 91       	ld	r25, -Z
 508:	82 91       	ld	r24, -Z
 50a:	82 83       	std	Z+2, r24	; 0x02
 50c:	93 83       	std	Z+3, r25	; 0x03
			if(misMatchCount>MAXMISMATCHES){
				setFrequency(&ad9833, (average-190)*2);
				dacValue = average;
			}

			for(uint8_t i = AVGSAMPLES-1; i>0; i--){
 50e:	0e 17       	cp	r16, r30
 510:	1f 07       	cpc	r17, r31
 512:	c9 f7       	brne	.-14     	; 0x506 <main+0xf0>
 514:	ad cf       	rjmp	.-166    	; 0x470 <main+0x5a>

00000516 <__vector_119>:
} // WriteByte_F0 

/*  \brief  ISR for receiving bytes from UARTF0.
 *          It puts the received byte in the RX buffer
 */
ISR(USARTF0_RXC_vect) {
 516:	1f 92       	push	r1
 518:	0f 92       	push	r0
 51a:	0f b6       	in	r0, 0x3f	; 63
 51c:	0f 92       	push	r0
 51e:	11 24       	eor	r1, r1
 520:	0b b6       	in	r0, 0x3b	; 59
 522:	0f 92       	push	r0
 524:	8f 93       	push	r24
 526:	9f 93       	push	r25
 528:	ef 93       	push	r30
 52a:	ff 93       	push	r31
	
	uint8_t curSlot, nextSlot;
	
	curSlot = rx_f0_wridx;
 52c:	80 91 30 21 	lds	r24, 0x2130	; 0x802130 <rx_f0_wridx>
	rx_f0_buf[curSlot] = USARTF0.DATA;
 530:	e8 2f       	mov	r30, r24
 532:	f0 e0       	ldi	r31, 0x00	; 0
 534:	90 91 a0 0b 	lds	r25, 0x0BA0	; 0x800ba0 <__TEXT_REGION_LENGTH__+0x700ba0>
 538:	e5 53       	subi	r30, 0x35	; 53
 53a:	ff 4d       	sbci	r31, 0xDF	; 223
 53c:	90 83       	st	Z, r25
	
	nextSlot = curSlot + 1;
 53e:	8f 5f       	subi	r24, 0xFF	; 255
	if(nextSlot >= RXBUF_DEPTH_F0)
 540:	84 36       	cpi	r24, 0x64	; 100
 542:	08 f0       	brcs	.+2      	; 0x546 <__vector_119+0x30>
	nextSlot = 0;
 544:	80 e0       	ldi	r24, 0x00	; 0
	
	if(nextSlot != rx_f0_rdidx)
 546:	90 91 2f 21 	lds	r25, 0x212F	; 0x80212f <rx_f0_rdidx>
 54a:	89 13       	cpse	r24, r25
	rx_f0_wridx = nextSlot;
 54c:	80 93 30 21 	sts	0x2130, r24	; 0x802130 <rx_f0_wridx>
	
} // ISR(USARTF0_RXC_vect)
 550:	ff 91       	pop	r31
 552:	ef 91       	pop	r30
 554:	9f 91       	pop	r25
 556:	8f 91       	pop	r24
 558:	0f 90       	pop	r0
 55a:	0b be       	out	0x3b, r0	; 59
 55c:	0f 90       	pop	r0
 55e:	0f be       	out	0x3f, r0	; 63
 560:	0f 90       	pop	r0
 562:	1f 90       	pop	r1
 564:	18 95       	reti

00000566 <__vector_120>:


/*  \brief  ISR for transmitting bytes to UARTF0.
 *          If there is a byte to send in the TX buffer, it will be send
 */
ISR(USARTF0_DRE_vect) {
 566:	1f 92       	push	r1
 568:	0f 92       	push	r0
 56a:	0f b6       	in	r0, 0x3f	; 63
 56c:	0f 92       	push	r0
 56e:	11 24       	eor	r1, r1
 570:	0b b6       	in	r0, 0x3b	; 59
 572:	0f 92       	push	r0
 574:	2f 93       	push	r18
 576:	8f 93       	push	r24
 578:	9f 93       	push	r25
 57a:	ef 93       	push	r30
 57c:	ff 93       	push	r31
	
	uint8_t curSlot, nextSlot, lastSlot;
	
	nextSlot = curSlot = tx_f0_rdidx;
 57e:	80 91 95 21 	lds	r24, 0x2195	; 0x802195 <tx_f0_rdidx>
	lastSlot = tx_f0_wridx;
 582:	90 91 96 21 	lds	r25, 0x2196	; 0x802196 <tx_f0_wridx>
	
	if(curSlot != lastSlot) {
 586:	89 17       	cp	r24, r25
 588:	69 f0       	breq	.+26     	; 0x5a4 <__vector_120+0x3e>
		USARTF0.DATA = tx_f0_buf[curSlot];
 58a:	e8 2f       	mov	r30, r24
 58c:	f0 e0       	ldi	r31, 0x00	; 0
 58e:	ef 5c       	subi	r30, 0xCF	; 207
 590:	fe 4d       	sbci	r31, 0xDE	; 222
 592:	20 81       	ld	r18, Z
 594:	20 93 a0 0b 	sts	0x0BA0, r18	; 0x800ba0 <__TEXT_REGION_LENGTH__+0x700ba0>
		nextSlot = curSlot + 1;
 598:	8f 5f       	subi	r24, 0xFF	; 255
		if(nextSlot >= TXBUF_DEPTH_F0)
 59a:	84 36       	cpi	r24, 0x64	; 100
 59c:	08 f0       	brcs	.+2      	; 0x5a0 <__vector_120+0x3a>
		nextSlot = 0;
 59e:	80 e0       	ldi	r24, 0x00	; 0
	}
	if(nextSlot == lastSlot)
 5a0:	89 13       	cpse	r24, r25
 5a2:	04 c0       	rjmp	.+8      	; 0x5ac <__vector_120+0x46>
	USARTF0.CTRLA = USART_RXCINTLVL_MED_gc | USART_TXCINTLVL_OFF_gc | USART_DREINTLVL_OFF_gc;
 5a4:	80 e2       	ldi	r24, 0x20	; 32
 5a6:	80 93 a3 0b 	sts	0x0BA3, r24	; 0x800ba3 <__TEXT_REGION_LENGTH__+0x700ba3>
 5aa:	89 2f       	mov	r24, r25
	
	tx_f0_rdidx = nextSlot;
 5ac:	80 93 95 21 	sts	0x2195, r24	; 0x802195 <tx_f0_rdidx>
	
} // ISR(USARTF0_DRE_vect) 
 5b0:	ff 91       	pop	r31
 5b2:	ef 91       	pop	r30
 5b4:	9f 91       	pop	r25
 5b6:	8f 91       	pop	r24
 5b8:	2f 91       	pop	r18
 5ba:	0f 90       	pop	r0
 5bc:	0b be       	out	0x3b, r0	; 59
 5be:	0f 90       	pop	r0
 5c0:	0f be       	out	0x3f, r0	; 63
 5c2:	0f 90       	pop	r0
 5c4:	1f 90       	pop	r1
 5c6:	18 95       	reti

000005c8 <initSoftwareSpi>:
#define F_CPU 2000000UL 
#include <util/delay.h>
#include "SoftSpi.h"

void initSoftwareSpi(void){
	SCLKPORT.DIRSET = SCLKPIN;
 5c8:	e0 e6       	ldi	r30, 0x60	; 96
 5ca:	f6 e0       	ldi	r31, 0x06	; 6
 5cc:	92 e0       	ldi	r25, 0x02	; 2
 5ce:	91 83       	std	Z+1, r25	; 0x01
	FSYNCPORT.DIRSET = FSYNCPIN;
 5d0:	84 e0       	ldi	r24, 0x04	; 4
 5d2:	81 83       	std	Z+1, r24	; 0x01
	SCLKPORT.OUTSET = SCLKPIN;
 5d4:	95 83       	std	Z+5, r25	; 0x05
	FSYNCPORT.OUTSET = FSYNCPIN;
 5d6:	85 83       	std	Z+5, r24	; 0x05
	SDATPORT.DIRSET = SDATPIN;
 5d8:	81 e0       	ldi	r24, 0x01	; 1
 5da:	81 83       	std	Z+1, r24	; 0x01
 5dc:	08 95       	ret

000005de <softwareSpiWrite>:
}

void softwareSpiWrite(uint16_t data){
 5de:	bc 01       	movw	r22, r24
	FSYNCPORT.OUTCLR = FSYNCPIN;
 5e0:	84 e0       	ldi	r24, 0x04	; 4
 5e2:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 5e6:	2f e0       	ldi	r18, 0x0F	; 15
 5e8:	30 e0       	ldi	r19, 0x00	; 0
	for(uint8_t i = 0; i<16; i++){
		if((data>>(15-i)) & 0x0001) SDATPORT.OUTSET = SDATPIN;
		else SDATPORT.OUTCLR = SDATPIN;
 5ea:	e0 e6       	ldi	r30, 0x60	; 96
 5ec:	f6 e0       	ldi	r31, 0x06	; 6
 5ee:	81 e0       	ldi	r24, 0x01	; 1
		
		SCLKPORT.OUTCLR = SCLKPIN;
 5f0:	92 e0       	ldi	r25, 0x02	; 2
}

void softwareSpiWrite(uint16_t data){
	FSYNCPORT.OUTCLR = FSYNCPIN;
	for(uint8_t i = 0; i<16; i++){
		if((data>>(15-i)) & 0x0001) SDATPORT.OUTSET = SDATPIN;
 5f2:	ab 01       	movw	r20, r22
 5f4:	02 2e       	mov	r0, r18
 5f6:	02 c0       	rjmp	.+4      	; 0x5fc <softwareSpiWrite+0x1e>
 5f8:	56 95       	lsr	r21
 5fa:	47 95       	ror	r20
 5fc:	0a 94       	dec	r0
 5fe:	e2 f7       	brpl	.-8      	; 0x5f8 <softwareSpiWrite+0x1a>
 600:	40 ff       	sbrs	r20, 0
 602:	02 c0       	rjmp	.+4      	; 0x608 <softwareSpiWrite+0x2a>
 604:	85 83       	std	Z+5, r24	; 0x05
 606:	01 c0       	rjmp	.+2      	; 0x60a <softwareSpiWrite+0x2c>
		else SDATPORT.OUTCLR = SDATPIN;
 608:	86 83       	std	Z+6, r24	; 0x06
		
		SCLKPORT.OUTCLR = SCLKPIN;
 60a:	96 83       	std	Z+6, r25	; 0x06
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 60c:	00 c0       	rjmp	.+0      	; 0x60e <softwareSpiWrite+0x30>
		_delay_us(1);
		SCLKPORT.OUTSET = SCLKPIN;
 60e:	95 83       	std	Z+5, r25	; 0x05
 610:	21 50       	subi	r18, 0x01	; 1
 612:	31 09       	sbc	r19, r1
 614:	70 f7       	brcc	.-36     	; 0x5f2 <softwareSpiWrite+0x14>
	}
	FSYNCPORT.OUTSET = FSYNCPIN;
 616:	84 e0       	ldi	r24, 0x04	; 4
 618:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
 61c:	08 95       	ret

0000061e <__divsf3>:
 61e:	0e 94 23 03 	call	0x646	; 0x646 <__divsf3x>
 622:	0c 94 04 04 	jmp	0x808	; 0x808 <__fp_round>
 626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__fp_pscB>
 62a:	58 f0       	brcs	.+22     	; 0x642 <__divsf3+0x24>
 62c:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__fp_pscA>
 630:	40 f0       	brcs	.+16     	; 0x642 <__divsf3+0x24>
 632:	29 f4       	brne	.+10     	; 0x63e <__divsf3+0x20>
 634:	5f 3f       	cpi	r21, 0xFF	; 255
 636:	29 f0       	breq	.+10     	; 0x642 <__divsf3+0x24>
 638:	0c 94 ed 03 	jmp	0x7da	; 0x7da <__fp_inf>
 63c:	51 11       	cpse	r21, r1
 63e:	0c 94 38 04 	jmp	0x870	; 0x870 <__fp_szero>
 642:	0c 94 f3 03 	jmp	0x7e6	; 0x7e6 <__fp_nan>

00000646 <__divsf3x>:
 646:	0e 94 15 04 	call	0x82a	; 0x82a <__fp_split3>
 64a:	68 f3       	brcs	.-38     	; 0x626 <__divsf3+0x8>

0000064c <__divsf3_pse>:
 64c:	99 23       	and	r25, r25
 64e:	b1 f3       	breq	.-20     	; 0x63c <__divsf3+0x1e>
 650:	55 23       	and	r21, r21
 652:	91 f3       	breq	.-28     	; 0x638 <__divsf3+0x1a>
 654:	95 1b       	sub	r25, r21
 656:	55 0b       	sbc	r21, r21
 658:	bb 27       	eor	r27, r27
 65a:	aa 27       	eor	r26, r26
 65c:	62 17       	cp	r22, r18
 65e:	73 07       	cpc	r23, r19
 660:	84 07       	cpc	r24, r20
 662:	38 f0       	brcs	.+14     	; 0x672 <__divsf3_pse+0x26>
 664:	9f 5f       	subi	r25, 0xFF	; 255
 666:	5f 4f       	sbci	r21, 0xFF	; 255
 668:	22 0f       	add	r18, r18
 66a:	33 1f       	adc	r19, r19
 66c:	44 1f       	adc	r20, r20
 66e:	aa 1f       	adc	r26, r26
 670:	a9 f3       	breq	.-22     	; 0x65c <__divsf3_pse+0x10>
 672:	35 d0       	rcall	.+106    	; 0x6de <__divsf3_pse+0x92>
 674:	0e 2e       	mov	r0, r30
 676:	3a f0       	brmi	.+14     	; 0x686 <__divsf3_pse+0x3a>
 678:	e0 e8       	ldi	r30, 0x80	; 128
 67a:	32 d0       	rcall	.+100    	; 0x6e0 <__divsf3_pse+0x94>
 67c:	91 50       	subi	r25, 0x01	; 1
 67e:	50 40       	sbci	r21, 0x00	; 0
 680:	e6 95       	lsr	r30
 682:	00 1c       	adc	r0, r0
 684:	ca f7       	brpl	.-14     	; 0x678 <__divsf3_pse+0x2c>
 686:	2b d0       	rcall	.+86     	; 0x6de <__divsf3_pse+0x92>
 688:	fe 2f       	mov	r31, r30
 68a:	29 d0       	rcall	.+82     	; 0x6de <__divsf3_pse+0x92>
 68c:	66 0f       	add	r22, r22
 68e:	77 1f       	adc	r23, r23
 690:	88 1f       	adc	r24, r24
 692:	bb 1f       	adc	r27, r27
 694:	26 17       	cp	r18, r22
 696:	37 07       	cpc	r19, r23
 698:	48 07       	cpc	r20, r24
 69a:	ab 07       	cpc	r26, r27
 69c:	b0 e8       	ldi	r27, 0x80	; 128
 69e:	09 f0       	breq	.+2      	; 0x6a2 <__divsf3_pse+0x56>
 6a0:	bb 0b       	sbc	r27, r27
 6a2:	80 2d       	mov	r24, r0
 6a4:	bf 01       	movw	r22, r30
 6a6:	ff 27       	eor	r31, r31
 6a8:	93 58       	subi	r25, 0x83	; 131
 6aa:	5f 4f       	sbci	r21, 0xFF	; 255
 6ac:	3a f0       	brmi	.+14     	; 0x6bc <__divsf3_pse+0x70>
 6ae:	9e 3f       	cpi	r25, 0xFE	; 254
 6b0:	51 05       	cpc	r21, r1
 6b2:	78 f0       	brcs	.+30     	; 0x6d2 <__divsf3_pse+0x86>
 6b4:	0c 94 ed 03 	jmp	0x7da	; 0x7da <__fp_inf>
 6b8:	0c 94 38 04 	jmp	0x870	; 0x870 <__fp_szero>
 6bc:	5f 3f       	cpi	r21, 0xFF	; 255
 6be:	e4 f3       	brlt	.-8      	; 0x6b8 <__divsf3_pse+0x6c>
 6c0:	98 3e       	cpi	r25, 0xE8	; 232
 6c2:	d4 f3       	brlt	.-12     	; 0x6b8 <__divsf3_pse+0x6c>
 6c4:	86 95       	lsr	r24
 6c6:	77 95       	ror	r23
 6c8:	67 95       	ror	r22
 6ca:	b7 95       	ror	r27
 6cc:	f7 95       	ror	r31
 6ce:	9f 5f       	subi	r25, 0xFF	; 255
 6d0:	c9 f7       	brne	.-14     	; 0x6c4 <__divsf3_pse+0x78>
 6d2:	88 0f       	add	r24, r24
 6d4:	91 1d       	adc	r25, r1
 6d6:	96 95       	lsr	r25
 6d8:	87 95       	ror	r24
 6da:	97 f9       	bld	r25, 7
 6dc:	08 95       	ret
 6de:	e1 e0       	ldi	r30, 0x01	; 1
 6e0:	66 0f       	add	r22, r22
 6e2:	77 1f       	adc	r23, r23
 6e4:	88 1f       	adc	r24, r24
 6e6:	bb 1f       	adc	r27, r27
 6e8:	62 17       	cp	r22, r18
 6ea:	73 07       	cpc	r23, r19
 6ec:	84 07       	cpc	r24, r20
 6ee:	ba 07       	cpc	r27, r26
 6f0:	20 f0       	brcs	.+8      	; 0x6fa <__divsf3_pse+0xae>
 6f2:	62 1b       	sub	r22, r18
 6f4:	73 0b       	sbc	r23, r19
 6f6:	84 0b       	sbc	r24, r20
 6f8:	ba 0b       	sbc	r27, r26
 6fa:	ee 1f       	adc	r30, r30
 6fc:	88 f7       	brcc	.-30     	; 0x6e0 <__divsf3_pse+0x94>
 6fe:	e0 95       	com	r30
 700:	08 95       	ret

00000702 <__fixunssfsi>:
 702:	0e 94 1d 04 	call	0x83a	; 0x83a <__fp_splitA>
 706:	88 f0       	brcs	.+34     	; 0x72a <__fixunssfsi+0x28>
 708:	9f 57       	subi	r25, 0x7F	; 127
 70a:	98 f0       	brcs	.+38     	; 0x732 <__fixunssfsi+0x30>
 70c:	b9 2f       	mov	r27, r25
 70e:	99 27       	eor	r25, r25
 710:	b7 51       	subi	r27, 0x17	; 23
 712:	b0 f0       	brcs	.+44     	; 0x740 <__fixunssfsi+0x3e>
 714:	e1 f0       	breq	.+56     	; 0x74e <__fixunssfsi+0x4c>
 716:	66 0f       	add	r22, r22
 718:	77 1f       	adc	r23, r23
 71a:	88 1f       	adc	r24, r24
 71c:	99 1f       	adc	r25, r25
 71e:	1a f0       	brmi	.+6      	; 0x726 <__fixunssfsi+0x24>
 720:	ba 95       	dec	r27
 722:	c9 f7       	brne	.-14     	; 0x716 <__fixunssfsi+0x14>
 724:	14 c0       	rjmp	.+40     	; 0x74e <__fixunssfsi+0x4c>
 726:	b1 30       	cpi	r27, 0x01	; 1
 728:	91 f0       	breq	.+36     	; 0x74e <__fixunssfsi+0x4c>
 72a:	0e 94 37 04 	call	0x86e	; 0x86e <__fp_zero>
 72e:	b1 e0       	ldi	r27, 0x01	; 1
 730:	08 95       	ret
 732:	0c 94 37 04 	jmp	0x86e	; 0x86e <__fp_zero>
 736:	67 2f       	mov	r22, r23
 738:	78 2f       	mov	r23, r24
 73a:	88 27       	eor	r24, r24
 73c:	b8 5f       	subi	r27, 0xF8	; 248
 73e:	39 f0       	breq	.+14     	; 0x74e <__fixunssfsi+0x4c>
 740:	b9 3f       	cpi	r27, 0xF9	; 249
 742:	cc f3       	brlt	.-14     	; 0x736 <__fixunssfsi+0x34>
 744:	86 95       	lsr	r24
 746:	77 95       	ror	r23
 748:	67 95       	ror	r22
 74a:	b3 95       	inc	r27
 74c:	d9 f7       	brne	.-10     	; 0x744 <__fixunssfsi+0x42>
 74e:	3e f4       	brtc	.+14     	; 0x75e <__fixunssfsi+0x5c>
 750:	90 95       	com	r25
 752:	80 95       	com	r24
 754:	70 95       	com	r23
 756:	61 95       	neg	r22
 758:	7f 4f       	sbci	r23, 0xFF	; 255
 75a:	8f 4f       	sbci	r24, 0xFF	; 255
 75c:	9f 4f       	sbci	r25, 0xFF	; 255
 75e:	08 95       	ret

00000760 <__floatunsisf>:
 760:	e8 94       	clt
 762:	09 c0       	rjmp	.+18     	; 0x776 <__floatsisf+0x12>

00000764 <__floatsisf>:
 764:	97 fb       	bst	r25, 7
 766:	3e f4       	brtc	.+14     	; 0x776 <__floatsisf+0x12>
 768:	90 95       	com	r25
 76a:	80 95       	com	r24
 76c:	70 95       	com	r23
 76e:	61 95       	neg	r22
 770:	7f 4f       	sbci	r23, 0xFF	; 255
 772:	8f 4f       	sbci	r24, 0xFF	; 255
 774:	9f 4f       	sbci	r25, 0xFF	; 255
 776:	99 23       	and	r25, r25
 778:	a9 f0       	breq	.+42     	; 0x7a4 <__floatsisf+0x40>
 77a:	f9 2f       	mov	r31, r25
 77c:	96 e9       	ldi	r25, 0x96	; 150
 77e:	bb 27       	eor	r27, r27
 780:	93 95       	inc	r25
 782:	f6 95       	lsr	r31
 784:	87 95       	ror	r24
 786:	77 95       	ror	r23
 788:	67 95       	ror	r22
 78a:	b7 95       	ror	r27
 78c:	f1 11       	cpse	r31, r1
 78e:	f8 cf       	rjmp	.-16     	; 0x780 <__floatsisf+0x1c>
 790:	fa f4       	brpl	.+62     	; 0x7d0 <__floatsisf+0x6c>
 792:	bb 0f       	add	r27, r27
 794:	11 f4       	brne	.+4      	; 0x79a <__floatsisf+0x36>
 796:	60 ff       	sbrs	r22, 0
 798:	1b c0       	rjmp	.+54     	; 0x7d0 <__floatsisf+0x6c>
 79a:	6f 5f       	subi	r22, 0xFF	; 255
 79c:	7f 4f       	sbci	r23, 0xFF	; 255
 79e:	8f 4f       	sbci	r24, 0xFF	; 255
 7a0:	9f 4f       	sbci	r25, 0xFF	; 255
 7a2:	16 c0       	rjmp	.+44     	; 0x7d0 <__floatsisf+0x6c>
 7a4:	88 23       	and	r24, r24
 7a6:	11 f0       	breq	.+4      	; 0x7ac <__floatsisf+0x48>
 7a8:	96 e9       	ldi	r25, 0x96	; 150
 7aa:	11 c0       	rjmp	.+34     	; 0x7ce <__floatsisf+0x6a>
 7ac:	77 23       	and	r23, r23
 7ae:	21 f0       	breq	.+8      	; 0x7b8 <__floatsisf+0x54>
 7b0:	9e e8       	ldi	r25, 0x8E	; 142
 7b2:	87 2f       	mov	r24, r23
 7b4:	76 2f       	mov	r23, r22
 7b6:	05 c0       	rjmp	.+10     	; 0x7c2 <__floatsisf+0x5e>
 7b8:	66 23       	and	r22, r22
 7ba:	71 f0       	breq	.+28     	; 0x7d8 <__floatsisf+0x74>
 7bc:	96 e8       	ldi	r25, 0x86	; 134
 7be:	86 2f       	mov	r24, r22
 7c0:	70 e0       	ldi	r23, 0x00	; 0
 7c2:	60 e0       	ldi	r22, 0x00	; 0
 7c4:	2a f0       	brmi	.+10     	; 0x7d0 <__floatsisf+0x6c>
 7c6:	9a 95       	dec	r25
 7c8:	66 0f       	add	r22, r22
 7ca:	77 1f       	adc	r23, r23
 7cc:	88 1f       	adc	r24, r24
 7ce:	da f7       	brpl	.-10     	; 0x7c6 <__floatsisf+0x62>
 7d0:	88 0f       	add	r24, r24
 7d2:	96 95       	lsr	r25
 7d4:	87 95       	ror	r24
 7d6:	97 f9       	bld	r25, 7
 7d8:	08 95       	ret

000007da <__fp_inf>:
 7da:	97 f9       	bld	r25, 7
 7dc:	9f 67       	ori	r25, 0x7F	; 127
 7de:	80 e8       	ldi	r24, 0x80	; 128
 7e0:	70 e0       	ldi	r23, 0x00	; 0
 7e2:	60 e0       	ldi	r22, 0x00	; 0
 7e4:	08 95       	ret

000007e6 <__fp_nan>:
 7e6:	9f ef       	ldi	r25, 0xFF	; 255
 7e8:	80 ec       	ldi	r24, 0xC0	; 192
 7ea:	08 95       	ret

000007ec <__fp_pscA>:
 7ec:	00 24       	eor	r0, r0
 7ee:	0a 94       	dec	r0
 7f0:	16 16       	cp	r1, r22
 7f2:	17 06       	cpc	r1, r23
 7f4:	18 06       	cpc	r1, r24
 7f6:	09 06       	cpc	r0, r25
 7f8:	08 95       	ret

000007fa <__fp_pscB>:
 7fa:	00 24       	eor	r0, r0
 7fc:	0a 94       	dec	r0
 7fe:	12 16       	cp	r1, r18
 800:	13 06       	cpc	r1, r19
 802:	14 06       	cpc	r1, r20
 804:	05 06       	cpc	r0, r21
 806:	08 95       	ret

00000808 <__fp_round>:
 808:	09 2e       	mov	r0, r25
 80a:	03 94       	inc	r0
 80c:	00 0c       	add	r0, r0
 80e:	11 f4       	brne	.+4      	; 0x814 <__fp_round+0xc>
 810:	88 23       	and	r24, r24
 812:	52 f0       	brmi	.+20     	; 0x828 <__fp_round+0x20>
 814:	bb 0f       	add	r27, r27
 816:	40 f4       	brcc	.+16     	; 0x828 <__fp_round+0x20>
 818:	bf 2b       	or	r27, r31
 81a:	11 f4       	brne	.+4      	; 0x820 <__fp_round+0x18>
 81c:	60 ff       	sbrs	r22, 0
 81e:	04 c0       	rjmp	.+8      	; 0x828 <__fp_round+0x20>
 820:	6f 5f       	subi	r22, 0xFF	; 255
 822:	7f 4f       	sbci	r23, 0xFF	; 255
 824:	8f 4f       	sbci	r24, 0xFF	; 255
 826:	9f 4f       	sbci	r25, 0xFF	; 255
 828:	08 95       	ret

0000082a <__fp_split3>:
 82a:	57 fd       	sbrc	r21, 7
 82c:	90 58       	subi	r25, 0x80	; 128
 82e:	44 0f       	add	r20, r20
 830:	55 1f       	adc	r21, r21
 832:	59 f0       	breq	.+22     	; 0x84a <__fp_splitA+0x10>
 834:	5f 3f       	cpi	r21, 0xFF	; 255
 836:	71 f0       	breq	.+28     	; 0x854 <__fp_splitA+0x1a>
 838:	47 95       	ror	r20

0000083a <__fp_splitA>:
 83a:	88 0f       	add	r24, r24
 83c:	97 fb       	bst	r25, 7
 83e:	99 1f       	adc	r25, r25
 840:	61 f0       	breq	.+24     	; 0x85a <__fp_splitA+0x20>
 842:	9f 3f       	cpi	r25, 0xFF	; 255
 844:	79 f0       	breq	.+30     	; 0x864 <__fp_splitA+0x2a>
 846:	87 95       	ror	r24
 848:	08 95       	ret
 84a:	12 16       	cp	r1, r18
 84c:	13 06       	cpc	r1, r19
 84e:	14 06       	cpc	r1, r20
 850:	55 1f       	adc	r21, r21
 852:	f2 cf       	rjmp	.-28     	; 0x838 <__fp_split3+0xe>
 854:	46 95       	lsr	r20
 856:	f1 df       	rcall	.-30     	; 0x83a <__fp_splitA>
 858:	08 c0       	rjmp	.+16     	; 0x86a <__fp_splitA+0x30>
 85a:	16 16       	cp	r1, r22
 85c:	17 06       	cpc	r1, r23
 85e:	18 06       	cpc	r1, r24
 860:	99 1f       	adc	r25, r25
 862:	f1 cf       	rjmp	.-30     	; 0x846 <__fp_splitA+0xc>
 864:	86 95       	lsr	r24
 866:	71 05       	cpc	r23, r1
 868:	61 05       	cpc	r22, r1
 86a:	08 94       	sec
 86c:	08 95       	ret

0000086e <__fp_zero>:
 86e:	e8 94       	clt

00000870 <__fp_szero>:
 870:	bb 27       	eor	r27, r27
 872:	66 27       	eor	r22, r22
 874:	77 27       	eor	r23, r23
 876:	cb 01       	movw	r24, r22
 878:	97 f9       	bld	r25, 7
 87a:	08 95       	ret

0000087c <__udivmodsi4>:
 87c:	a1 e2       	ldi	r26, 0x21	; 33
 87e:	1a 2e       	mov	r1, r26
 880:	aa 1b       	sub	r26, r26
 882:	bb 1b       	sub	r27, r27
 884:	fd 01       	movw	r30, r26
 886:	0d c0       	rjmp	.+26     	; 0x8a2 <__udivmodsi4_ep>

00000888 <__udivmodsi4_loop>:
 888:	aa 1f       	adc	r26, r26
 88a:	bb 1f       	adc	r27, r27
 88c:	ee 1f       	adc	r30, r30
 88e:	ff 1f       	adc	r31, r31
 890:	a2 17       	cp	r26, r18
 892:	b3 07       	cpc	r27, r19
 894:	e4 07       	cpc	r30, r20
 896:	f5 07       	cpc	r31, r21
 898:	20 f0       	brcs	.+8      	; 0x8a2 <__udivmodsi4_ep>
 89a:	a2 1b       	sub	r26, r18
 89c:	b3 0b       	sbc	r27, r19
 89e:	e4 0b       	sbc	r30, r20
 8a0:	f5 0b       	sbc	r31, r21

000008a2 <__udivmodsi4_ep>:
 8a2:	66 1f       	adc	r22, r22
 8a4:	77 1f       	adc	r23, r23
 8a6:	88 1f       	adc	r24, r24
 8a8:	99 1f       	adc	r25, r25
 8aa:	1a 94       	dec	r1
 8ac:	69 f7       	brne	.-38     	; 0x888 <__udivmodsi4_loop>
 8ae:	60 95       	com	r22
 8b0:	70 95       	com	r23
 8b2:	80 95       	com	r24
 8b4:	90 95       	com	r25
 8b6:	9b 01       	movw	r18, r22
 8b8:	ac 01       	movw	r20, r24
 8ba:	bd 01       	movw	r22, r26
 8bc:	cf 01       	movw	r24, r30
 8be:	08 95       	ret

000008c0 <_exit>:
 8c0:	f8 94       	cli

000008c2 <__stop_program>:
 8c2:	ff cf       	rjmp	.-2      	; 0x8c2 <__stop_program>
