
ad9833interface.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000988  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  000009fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000d5  00802000  00802000  000009fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a2c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000050db  00000000  00000000  00000b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000398c  00000000  00000000  00005c57  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e93  00000000  00000000  000095e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002d8  00000000  00000000  0000a478  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003004  00000000  00000000  0000a750  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d47  00000000  00000000  0000d754  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  0000e49b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
   8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
   c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  10:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  14:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  18:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  1c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  20:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  24:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  28:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  2c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  30:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  34:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  38:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  3c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  40:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  44:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  48:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  4c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  50:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  54:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  58:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  5c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  60:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  64:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  68:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  6c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  70:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  74:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  78:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  7c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  80:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  84:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  88:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  8c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  90:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  94:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  98:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  9c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  ac:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  bc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  c8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  dc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  ec:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  fc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 100:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 104:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 108:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 10c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 110:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 114:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 118:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 11c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 120:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 124:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 128:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 12c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 130:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 134:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 138:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 13c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 140:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 144:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 148:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 14c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 150:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 154:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 158:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 15c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 160:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 164:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 168:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 16c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 170:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 174:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 178:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 17c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 180:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 184:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 188:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 18c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 190:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 194:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 198:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 19c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1a0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1ac:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1bc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1dc:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__vector_119>
 1e0:	0c 94 d6 02 	jmp	0x5ac	; 0x5ac <__vector_120>
 1e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1e8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1ec:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1f0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1f4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1f8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e5       	ldi	r29, 0x5F	; 95
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60

0000020c <__do_copy_data>:
 20c:	10 e2       	ldi	r17, 0x20	; 32
 20e:	a0 e0       	ldi	r26, 0x00	; 0
 210:	b0 e2       	ldi	r27, 0x20	; 32
 212:	e8 e8       	ldi	r30, 0x88	; 136
 214:	f9 e0       	ldi	r31, 0x09	; 9
 216:	00 e0       	ldi	r16, 0x00	; 0
 218:	0b bf       	out	0x3b, r16	; 59
 21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
 21c:	07 90       	elpm	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	a0 30       	cpi	r26, 0x00	; 0
 222:	b1 07       	cpc	r27, r17
 224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>

00000226 <__do_clear_bss>:
 226:	20 e2       	ldi	r18, 0x20	; 32
 228:	a0 e0       	ldi	r26, 0x00	; 0
 22a:	b0 e2       	ldi	r27, 0x20	; 32
 22c:	01 c0       	rjmp	.+2      	; 0x230 <.do_clear_bss_start>

0000022e <.do_clear_bss_loop>:
 22e:	1d 92       	st	X+, r1

00000230 <.do_clear_bss_start>:
 230:	a5 3d       	cpi	r26, 0xD5	; 213
 232:	b2 07       	cpc	r27, r18
 234:	e1 f7       	brne	.-8      	; 0x22e <.do_clear_bss_loop>
 236:	0e 94 23 02 	call	0x446	; 0x446 <main>
 23a:	0c 94 c2 04 	jmp	0x984	; 0x984 <_exit>

0000023e <__bad_interrupt>:
 23e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000242 <writeControlRegister>:
	softwareSpiWrite(0xE000 | (pWavgen->_phaseRegister & 0x1FFF));	//Reg 2
	pWavgen->_PSELECT = true;
	writeControlRegister(pWavgen);
}

void writeControlRegister(WAVGEN_t *pWavgen){
 242:	fc 01       	movw	r30, r24
	pWavgen->_controlRegister = 0x0000 |
 244:	87 81       	ldd	r24, Z+7	; 0x07
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	9c 01       	movw	r18, r24
 24a:	22 0f       	add	r18, r18
 24c:	33 1f       	adc	r19, r19
 24e:	96 81       	ldd	r25, Z+6	; 0x06
 250:	89 2f       	mov	r24, r25
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	88 0f       	add	r24, r24
 256:	99 1f       	adc	r25, r25
 258:	88 0f       	add	r24, r24
 25a:	99 1f       	adc	r25, r25
 25c:	88 0f       	add	r24, r24
 25e:	99 1f       	adc	r25, r25
 260:	82 2b       	or	r24, r18
 262:	93 2b       	or	r25, r19
 264:	25 81       	ldd	r18, Z+5	; 0x05
 266:	40 e2       	ldi	r20, 0x20	; 32
 268:	24 9f       	mul	r18, r20
 26a:	90 01       	movw	r18, r0
 26c:	11 24       	eor	r1, r1
 26e:	82 2b       	or	r24, r18
 270:	93 2b       	or	r25, r19
 272:	22 85       	ldd	r18, Z+10	; 0x0a
 274:	40 e4       	ldi	r20, 0x40	; 64
 276:	24 9f       	mul	r18, r20
 278:	90 01       	movw	r18, r0
 27a:	11 24       	eor	r1, r1
 27c:	82 2b       	or	r24, r18
 27e:	93 2b       	or	r25, r19
 280:	23 85       	ldd	r18, Z+11	; 0x0b
 282:	40 e8       	ldi	r20, 0x80	; 128
 284:	24 9f       	mul	r18, r20
 286:	90 01       	movw	r18, r0
 288:	11 24       	eor	r1, r1
 28a:	82 2b       	or	r24, r18
 28c:	93 2b       	or	r25, r19
 28e:	24 81       	ldd	r18, Z+4	; 0x04
 290:	92 2b       	or	r25, r18
 292:	21 85       	ldd	r18, Z+9	; 0x09
 294:	30 e0       	ldi	r19, 0x00	; 0
 296:	32 2f       	mov	r19, r18
 298:	22 27       	eor	r18, r18
 29a:	33 0f       	add	r19, r19
 29c:	33 0f       	add	r19, r19
 29e:	82 2b       	or	r24, r18
 2a0:	93 2b       	or	r25, r19
 2a2:	20 85       	ldd	r18, Z+8	; 0x08
 2a4:	30 e0       	ldi	r19, 0x00	; 0
 2a6:	32 2f       	mov	r19, r18
 2a8:	22 27       	eor	r18, r18
 2aa:	33 0f       	add	r19, r19
 2ac:	33 0f       	add	r19, r19
 2ae:	33 0f       	add	r19, r19
 2b0:	82 2b       	or	r24, r18
 2b2:	93 2b       	or	r25, r19
 2b4:	23 81       	ldd	r18, Z+3	; 0x03
 2b6:	30 e0       	ldi	r19, 0x00	; 0
 2b8:	32 2f       	mov	r19, r18
 2ba:	22 27       	eor	r18, r18
 2bc:	32 95       	swap	r19
 2be:	30 7f       	andi	r19, 0xF0	; 240
 2c0:	82 2b       	or	r24, r18
 2c2:	93 2b       	or	r25, r19
 2c4:	22 81       	ldd	r18, Z+2	; 0x02
 2c6:	30 e0       	ldi	r19, 0x00	; 0
 2c8:	32 2f       	mov	r19, r18
 2ca:	22 27       	eor	r18, r18
 2cc:	32 95       	swap	r19
 2ce:	33 0f       	add	r19, r19
 2d0:	30 7e       	andi	r19, 0xE0	; 224
 2d2:	82 2b       	or	r24, r18
 2d4:	93 2b       	or	r25, r19
 2d6:	80 83       	st	Z, r24
 2d8:	91 83       	std	Z+1, r25	; 0x01
	(pWavgen->_OPBITEN << 5) | (pWavgen->_SLEEP1 << 6) |
	(pWavgen->_SLEEP12 << 7) | (pWavgen->_reset << 8) |
	(pWavgen->_PSELECT << 10) |(pWavgen->_FSELECT << 11) |
	(pWavgen->_HLB << 12) | (pWavgen->_B28BIT << 13);
										
	softwareSpiWrite(pWavgen->_controlRegister);
 2da:	0e 94 12 03 	call	0x624	; 0x624 <softwareSpiWrite>
 2de:	08 95       	ret

000002e0 <initGenerator>:
 *  Author: Hendrik-Jan
 */ 
#include <math.h>
#include "AD9833.h"

void initGenerator(WAVGEN_t *pWavgen){
 2e0:	cf 93       	push	r28
 2e2:	df 93       	push	r29
 2e4:	ec 01       	movw	r28, r24
	initSoftwareSpi();
 2e6:	0e 94 07 03 	call	0x60e	; 0x60e <initSoftwareSpi>
	pWavgen->_controlRegister = 0; 
 2ea:	18 82       	st	Y, r1
 2ec:	19 82       	std	Y+1, r1	; 0x01
	pWavgen->_B28BIT = true;
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	8a 83       	std	Y+2, r24	; 0x02
	pWavgen->_HLB = false;
 2f2:	1b 82       	std	Y+3, r1	; 0x03
	pWavgen->_reset = false;
 2f4:	1c 82       	std	Y+4, r1	; 0x04
	pWavgen->_OPBITEN = false;
 2f6:	1d 82       	std	Y+5, r1	; 0x05
	pWavgen->_DIV2 = true;
 2f8:	8e 83       	std	Y+6, r24	; 0x06
	
	pWavgen->_FSELECT = false;
 2fa:	18 86       	std	Y+8, r1	; 0x08
	pWavgen->_PSELECT = false;
 2fc:	19 86       	std	Y+9, r1	; 0x09
	pWavgen->_SLEEP1 = false;
 2fe:	1a 86       	std	Y+10, r1	; 0x0a
	pWavgen->_SLEEP12 = false;
 300:	1b 86       	std	Y+11, r1	; 0x0b
	
	pWavgen->_freq = 1000;
 302:	88 ee       	ldi	r24, 0xE8	; 232
 304:	93 e0       	ldi	r25, 0x03	; 3
 306:	a0 e0       	ldi	r26, 0x00	; 0
 308:	b0 e0       	ldi	r27, 0x00	; 0
 30a:	88 8b       	std	Y+16, r24	; 0x10
 30c:	99 8b       	std	Y+17, r25	; 0x11
 30e:	aa 8b       	std	Y+18, r26	; 0x12
 310:	bb 8b       	std	Y+19, r27	; 0x13
	pWavgen->_phase = 0;
 312:	1e 8a       	std	Y+22, r1	; 0x16
 314:	1f 8a       	std	Y+23, r1	; 0x17
	pWavgen->_FMCLK = 25000000UL;
 316:	80 e4       	ldi	r24, 0x40	; 64
 318:	98 e7       	ldi	r25, 0x78	; 120
 31a:	ad e7       	ldi	r26, 0x7D	; 125
 31c:	b1 e0       	ldi	r27, 0x01	; 1
 31e:	88 8f       	std	Y+24, r24	; 0x18
 320:	99 8f       	std	Y+25, r25	; 0x19
 322:	aa 8f       	std	Y+26, r26	; 0x1a
 324:	bb 8f       	std	Y+27, r27	; 0x1b
	
	
	pWavgen->_CLKratio = (double)pWavgen->_FMCLK/MAXDACVAL;
 326:	80 e2       	ldi	r24, 0x20	; 32
 328:	9c eb       	ldi	r25, 0xBC	; 188
 32a:	ae eb       	ldi	r26, 0xBE	; 190
 32c:	bd e3       	ldi	r27, 0x3D	; 61
 32e:	8c 8f       	std	Y+28, r24	; 0x1c
 330:	9d 8f       	std	Y+29, r25	; 0x1d
 332:	ae 8f       	std	Y+30, r26	; 0x1e
 334:	bf 8f       	std	Y+31, r27	; 0x1f
	writeControlRegister(pWavgen);
 336:	ce 01       	movw	r24, r28
 338:	0e 94 21 01 	call	0x242	; 0x242 <writeControlRegister>
}
 33c:	df 91       	pop	r29
 33e:	cf 91       	pop	r28
 340:	08 95       	ret

00000342 <setWaveform>:

void setWaveform(WAVGEN_t *pWavgen, waveforms_t waveform){
	switch(waveform){
 342:	61 30       	cpi	r22, 0x01	; 1
 344:	69 f0       	breq	.+26     	; 0x360 <setWaveform+0x1e>
 346:	18 f0       	brcs	.+6      	; 0x34e <setWaveform+0xc>
 348:	62 30       	cpi	r22, 0x02	; 2
 34a:	29 f0       	breq	.+10     	; 0x356 <setWaveform+0x14>
 34c:	0d c0       	rjmp	.+26     	; 0x368 <setWaveform+0x26>
		case SINEWAVE: pWavgen->_OPBITEN = false; pWavgen->_mode = false; break;
 34e:	fc 01       	movw	r30, r24
 350:	15 82       	std	Z+5, r1	; 0x05
 352:	17 82       	std	Z+7, r1	; 0x07
 354:	09 c0       	rjmp	.+18     	; 0x368 <setWaveform+0x26>
		case SQUAREWAVE: pWavgen->_OPBITEN = true; pWavgen->_mode = false; break;
 356:	21 e0       	ldi	r18, 0x01	; 1
 358:	fc 01       	movw	r30, r24
 35a:	25 83       	std	Z+5, r18	; 0x05
 35c:	17 82       	std	Z+7, r1	; 0x07
 35e:	04 c0       	rjmp	.+8      	; 0x368 <setWaveform+0x26>
		case TRIANGLEWAVE: pWavgen->_OPBITEN = false; pWavgen->_mode = true; break;
 360:	fc 01       	movw	r30, r24
 362:	15 82       	std	Z+5, r1	; 0x05
 364:	21 e0       	ldi	r18, 0x01	; 1
 366:	27 83       	std	Z+7, r18	; 0x07
	}
	writeControlRegister(pWavgen);
 368:	0e 94 21 01 	call	0x242	; 0x242 <writeControlRegister>
 36c:	08 95       	ret

0000036e <setFrequency>:
}

void setFrequency(WAVGEN_t *pWavgen, uint32_t frequency){
 36e:	cf 93       	push	r28
 370:	df 93       	push	r29
 372:	ec 01       	movw	r28, r24
	if(pWavgen->_freq == frequency) return;
 374:	88 89       	ldd	r24, Y+16	; 0x10
 376:	99 89       	ldd	r25, Y+17	; 0x11
 378:	aa 89       	ldd	r26, Y+18	; 0x12
 37a:	bb 89       	ldd	r27, Y+19	; 0x13
 37c:	84 17       	cp	r24, r20
 37e:	95 07       	cpc	r25, r21
 380:	a6 07       	cpc	r26, r22
 382:	b7 07       	cpc	r27, r23
 384:	09 f4       	brne	.+2      	; 0x388 <setFrequency+0x1a>
 386:	4b c0       	rjmp	.+150    	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 388:	cb 01       	movw	r24, r22
 38a:	ba 01       	movw	r22, r20
	pWavgen->_freq = frequency;
 38c:	68 8b       	std	Y+16, r22	; 0x10
 38e:	79 8b       	std	Y+17, r23	; 0x11
 390:	8a 8b       	std	Y+18, r24	; 0x12
 392:	9b 8b       	std	Y+19, r25	; 0x13
 	pWavgen->_frequencyRegister = (uint32_t)frequency/pWavgen->_CLKratio;
 394:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <__floatunsisf>
 398:	2c 8d       	ldd	r18, Y+28	; 0x1c
 39a:	3d 8d       	ldd	r19, Y+29	; 0x1d
 39c:	4e 8d       	ldd	r20, Y+30	; 0x1e
 39e:	5f 8d       	ldd	r21, Y+31	; 0x1f
 3a0:	0e 94 32 03 	call	0x664	; 0x664 <__divsf3>
 3a4:	0e 94 a4 03 	call	0x748	; 0x748 <__fixunssfsi>
 3a8:	6c 87       	std	Y+12, r22	; 0x0c
 3aa:	7d 87       	std	Y+13, r23	; 0x0d
 3ac:	8e 87       	std	Y+14, r24	; 0x0e
 3ae:	9f 87       	std	Y+15, r25	; 0x0f
	 
	 pWavgen->_FSELECT = true;
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	88 87       	std	Y+8, r24	; 0x08
	 writeControlRegister(pWavgen);
 3b4:	ce 01       	movw	r24, r28
 3b6:	0e 94 21 01 	call	0x242	; 0x242 <writeControlRegister>
	 softwareSpiWrite(0x4000 | (pWavgen->_frequencyRegister & 0x3FFF));	//Reg 1 LSB
 3ba:	8c 85       	ldd	r24, Y+12	; 0x0c
 3bc:	9d 85       	ldd	r25, Y+13	; 0x0d
 3be:	9f 73       	andi	r25, 0x3F	; 63
 3c0:	90 64       	ori	r25, 0x40	; 64
 3c2:	0e 94 12 03 	call	0x624	; 0x624 <softwareSpiWrite>
	 softwareSpiWrite(0x4000 | ((pWavgen->_frequencyRegister >> 14) & 0x3FFF));	//Reg 1 MSB
 3c6:	8c 85       	ldd	r24, Y+12	; 0x0c
 3c8:	9d 85       	ldd	r25, Y+13	; 0x0d
 3ca:	ae 85       	ldd	r26, Y+14	; 0x0e
 3cc:	bf 85       	ldd	r27, Y+15	; 0x0f
 3ce:	07 2e       	mov	r0, r23
 3d0:	7e e0       	ldi	r23, 0x0E	; 14
 3d2:	b6 95       	lsr	r27
 3d4:	a7 95       	ror	r26
 3d6:	97 95       	ror	r25
 3d8:	87 95       	ror	r24
 3da:	7a 95       	dec	r23
 3dc:	d1 f7       	brne	.-12     	; 0x3d2 <setFrequency+0x64>
 3de:	70 2d       	mov	r23, r0
 3e0:	9f 73       	andi	r25, 0x3F	; 63
 3e2:	90 64       	ori	r25, 0x40	; 64
 3e4:	0e 94 12 03 	call	0x624	; 0x624 <softwareSpiWrite>
	softwareSpiWrite(0x8000 | (pWavgen->_frequencyRegister & 0x3FFF));	//Reg 2 LSB
 3e8:	8c 85       	ldd	r24, Y+12	; 0x0c
 3ea:	9d 85       	ldd	r25, Y+13	; 0x0d
 3ec:	9f 73       	andi	r25, 0x3F	; 63
 3ee:	90 68       	ori	r25, 0x80	; 128
 3f0:	0e 94 12 03 	call	0x624	; 0x624 <softwareSpiWrite>
	softwareSpiWrite(0x8000 | ((pWavgen->_frequencyRegister >> 14) & 0x3FFF));	//Reg 2 MSB
 3f4:	8c 85       	ldd	r24, Y+12	; 0x0c
 3f6:	9d 85       	ldd	r25, Y+13	; 0x0d
 3f8:	ae 85       	ldd	r26, Y+14	; 0x0e
 3fa:	bf 85       	ldd	r27, Y+15	; 0x0f
 3fc:	07 2e       	mov	r0, r23
 3fe:	7e e0       	ldi	r23, 0x0E	; 14
 400:	b6 95       	lsr	r27
 402:	a7 95       	ror	r26
 404:	97 95       	ror	r25
 406:	87 95       	ror	r24
 408:	7a 95       	dec	r23
 40a:	d1 f7       	brne	.-12     	; 0x400 <__LOCK_REGION_LENGTH__>
 40c:	70 2d       	mov	r23, r0
 40e:	9f 73       	andi	r25, 0x3F	; 63
 410:	90 68       	ori	r25, 0x80	; 128
 412:	0e 94 12 03 	call	0x624	; 0x624 <softwareSpiWrite>
		pWavgen->_FSELECT = false;
 416:	18 86       	std	Y+8, r1	; 0x08
		writeControlRegister(pWavgen);
 418:	ce 01       	movw	r24, r28
 41a:	0e 94 21 01 	call	0x242	; 0x242 <writeControlRegister>
}
 41e:	df 91       	pop	r29
 420:	cf 91       	pop	r28
 422:	08 95       	ret

00000424 <initADC>:
		}
    }
}

void initADC(void){
	PORTA.DIRCLR = PIN0_bm; 
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x700602>
	ADCA.CTRLB = ADC_FREERUN_bm | ADC_RESOLUTION_12BIT_gc;
 42a:	e0 e0       	ldi	r30, 0x00	; 0
 42c:	f2 e0       	ldi	r31, 0x02	; 2
 42e:	98 e0       	ldi	r25, 0x08	; 8
 430:	91 83       	std	Z+1, r25	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_INTVCC_gc;
 432:	90 e1       	ldi	r25, 0x10	; 16
 434:	92 83       	std	Z+2, r25	; 0x02
	ADCA.EVCTRL = ADC_SWEEP0_bm;
 436:	90 e4       	ldi	r25, 0x40	; 64
 438:	93 83       	std	Z+3, r25	; 0x03

	ADCA.PRESCALER = ADC_PRESCALER_DIV512_gc;
 43a:	97 e0       	ldi	r25, 0x07	; 7
 43c:	94 83       	std	Z+4, r25	; 0x04
	ADCA.CH0.CTRL = ADC_CH_INPUTMODE_SINGLEENDED_gc;
 43e:	80 a3       	std	Z+32, r24	; 0x20
	ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN0_gc;
 440:	11 a2       	std	Z+33, r1	; 0x21
	ADCA.CTRLA = ADC_ENABLE_bm;
 442:	80 83       	st	Z, r24
 444:	08 95       	ret

00000446 <main>:

#define AVGSAMPLES 3
#define MAXMISMATCHES 254

int main(void)
{
 446:	cf 93       	push	r28
 448:	df 93       	push	r29
 44a:	cd b7       	in	r28, 0x3d	; 61
 44c:	de b7       	in	r29, 0x3e	; 62
 44e:	a0 97       	sbiw	r28, 0x20	; 32
 450:	cd bf       	out	0x3d, r28	; 61
 452:	de bf       	out	0x3e, r29	; 62
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 454:	83 ef       	ldi	r24, 0xF3	; 243
 456:	91 e0       	ldi	r25, 0x01	; 1
 458:	01 97       	sbiw	r24, 0x01	; 1
 45a:	f1 f7       	brne	.-4      	; 0x458 <main+0x12>
 45c:	00 c0       	rjmp	.+0      	; 0x45e <main+0x18>
 45e:	00 00       	nop
	_delay_ms(1);
	WAVGEN_t ad9833;
	initGenerator(&ad9833);
 460:	ce 01       	movw	r24, r28
 462:	01 96       	adiw	r24, 0x01	; 1
 464:	0e 94 70 01 	call	0x2e0	; 0x2e0 <initGenerator>
	setWaveform(&ad9833, TRIANGLEWAVE);
 468:	61 e0       	ldi	r22, 0x01	; 1
 46a:	ce 01       	movw	r24, r28
 46c:	01 96       	adiw	r24, 0x01	; 1
 46e:	0e 94 a1 01 	call	0x342	; 0x342 <setWaveform>
	initADC();
 472:	0e 94 12 02 	call	0x424	; 0x424 <initADC>
	uint16_t phase = 0;
	static uint16_t lastMeasurements[AVGSAMPLES];
	setFrequency(&ad9833, 1);
 476:	41 e0       	ldi	r20, 0x01	; 1
 478:	50 e0       	ldi	r21, 0x00	; 0
 47a:	60 e0       	ldi	r22, 0x00	; 0
 47c:	70 e0       	ldi	r23, 0x00	; 0
 47e:	ce 01       	movw	r24, r28
 480:	01 96       	adiw	r24, 0x01	; 1
 482:	0e 94 b7 01 	call	0x36e	; 0x36e <setFrequency>
    while (1) 
    {	
		if((ADCA.CH0.INTFLAGS & ADC_CH_CHIF_bm)){
 486:	e1 2c       	mov	r14, r1
 488:	68 94       	set
 48a:	ff 24       	eor	r15, r15
 48c:	f1 f8       	bld	r15, 1
			lastMeasurements[0] = ADCA.CH0.RES;
 48e:	0f 2e       	mov	r0, r31
 490:	f3 e0       	ldi	r31, 0x03	; 3
 492:	cf 2e       	mov	r12, r31
 494:	f0 e2       	ldi	r31, 0x20	; 32
 496:	df 2e       	mov	r13, r31
 498:	f0 2d       	mov	r31, r0
			ADCA.CH0.INTFLAGS = ADC_CH_CHIF_bm;
 49a:	11 e0       	ldi	r17, 0x01	; 1
	uint16_t phase = 0;
	static uint16_t lastMeasurements[AVGSAMPLES];
	setFrequency(&ad9833, 1);
    while (1) 
    {	
		if((ADCA.CH0.INTFLAGS & ADC_CH_CHIF_bm)){
 49c:	f7 01       	movw	r30, r14
 49e:	83 a1       	ldd	r24, Z+35	; 0x23
 4a0:	80 ff       	sbrs	r24, 0
 4a2:	fc cf       	rjmp	.-8      	; 0x49c <main+0x56>
			lastMeasurements[0] = ADCA.CH0.RES;
 4a4:	24 a1       	ldd	r18, Z+36	; 0x24
 4a6:	35 a1       	ldd	r19, Z+37	; 0x25
 4a8:	f6 01       	movw	r30, r12
 4aa:	20 83       	st	Z, r18
 4ac:	31 83       	std	Z+1, r19	; 0x01
			ADCA.CH0.INTFLAGS = ADC_CH_CHIF_bm;
 4ae:	f7 01       	movw	r30, r14
 4b0:	13 a3       	std	Z+35, r17	; 0x23
			
			uint32_t average = 0;
			for(uint8_t i = 0; i< AVGSAMPLES; i++){
				average+=lastMeasurements[i];
 4b2:	f6 01       	movw	r30, r12
 4b4:	44 81       	ldd	r20, Z+4	; 0x04
 4b6:	55 81       	ldd	r21, Z+5	; 0x05
 4b8:	62 81       	ldd	r22, Z+2	; 0x02
 4ba:	73 81       	ldd	r23, Z+3	; 0x03
 4bc:	cb 01       	movw	r24, r22
 4be:	a0 e0       	ldi	r26, 0x00	; 0
 4c0:	b0 e0       	ldi	r27, 0x00	; 0
 4c2:	84 0f       	add	r24, r20
 4c4:	95 1f       	adc	r25, r21
 4c6:	a1 1d       	adc	r26, r1
 4c8:	b1 1d       	adc	r27, r1
 4ca:	bc 01       	movw	r22, r24
 4cc:	cd 01       	movw	r24, r26
 4ce:	62 0f       	add	r22, r18
 4d0:	73 1f       	adc	r23, r19
 4d2:	81 1d       	adc	r24, r1
 4d4:	91 1d       	adc	r25, r1
			}
			average/=AVGSAMPLES;
 4d6:	2b ea       	ldi	r18, 0xAB	; 171
 4d8:	3a ea       	ldi	r19, 0xAA	; 170
 4da:	4a ea       	ldi	r20, 0xAA	; 170
 4dc:	5a ea       	ldi	r21, 0xAA	; 170
 4de:	0e 94 70 04 	call	0x8e0	; 0x8e0 <__umulsidi3>
 4e2:	00 e2       	ldi	r16, 0x20	; 32
 4e4:	0e 94 9d 04 	call	0x93a	; 0x93a <__lshrdi3>
 4e8:	42 2e       	mov	r4, r18
 4ea:	53 2e       	mov	r5, r19
 4ec:	64 2e       	mov	r6, r20
 4ee:	75 2e       	mov	r7, r21
 4f0:	76 94       	lsr	r7
 4f2:	67 94       	ror	r6
 4f4:	57 94       	ror	r5
 4f6:	47 94       	ror	r4
			
			static uint8_t misMatchCount;
			static uint16_t dacValue = 0;
			
			if(average != dacValue){
 4f8:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <dacValue.4198>
 4fc:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <dacValue.4198+0x1>
 500:	a0 e0       	ldi	r26, 0x00	; 0
 502:	b0 e0       	ldi	r27, 0x00	; 0
 504:	48 16       	cp	r4, r24
 506:	59 06       	cpc	r5, r25
 508:	6a 06       	cpc	r6, r26
 50a:	7b 06       	cpc	r7, r27
 50c:	41 f0       	breq	.+16     	; 0x51e <main+0xd8>
				misMatchCount++;
 50e:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_end>
 512:	8f 5f       	subi	r24, 0xFF	; 255
 514:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_end>
			} else{
				misMatchCount = 0;
			}
			
			if(misMatchCount>MAXMISMATCHES){
 518:	8f 3f       	cpi	r24, 0xFF	; 255
 51a:	b1 f4       	brne	.+44     	; 0x548 <main+0x102>
 51c:	03 c0       	rjmp	.+6      	; 0x524 <main+0xde>
			static uint16_t dacValue = 0;
			
			if(average != dacValue){
				misMatchCount++;
			} else{
				misMatchCount = 0;
 51e:	10 92 00 20 	sts	0x2000, r1	; 0x802000 <__data_end>
 522:	12 c0       	rjmp	.+36     	; 0x548 <main+0x102>
			}
			
			if(misMatchCount>MAXMISMATCHES){
				setFrequency(&ad9833, (average-190)*2);
 524:	b3 01       	movw	r22, r6
 526:	a2 01       	movw	r20, r4
 528:	4e 5b       	subi	r20, 0xBE	; 190
 52a:	51 09       	sbc	r21, r1
 52c:	61 09       	sbc	r22, r1
 52e:	70 48       	sbci	r23, 0x80	; 128
 530:	44 0f       	add	r20, r20
 532:	55 1f       	adc	r21, r21
 534:	66 1f       	adc	r22, r22
 536:	77 1f       	adc	r23, r23
 538:	ce 01       	movw	r24, r28
 53a:	01 96       	adiw	r24, 0x01	; 1
 53c:	0e 94 b7 01 	call	0x36e	; 0x36e <setFrequency>
				dacValue = average;
 540:	40 92 01 20 	sts	0x2001, r4	; 0x802001 <dacValue.4198>
 544:	50 92 02 20 	sts	0x2002, r5	; 0x802002 <dacValue.4198+0x1>
			}

			for(uint8_t i = AVGSAMPLES-1; i>0; i--){
				lastMeasurements[i] = lastMeasurements[i-1];
 548:	f6 01       	movw	r30, r12
 54a:	82 81       	ldd	r24, Z+2	; 0x02
 54c:	93 81       	ldd	r25, Z+3	; 0x03
 54e:	84 83       	std	Z+4, r24	; 0x04
 550:	95 83       	std	Z+5, r25	; 0x05
 552:	80 81       	ld	r24, Z
 554:	91 81       	ldd	r25, Z+1	; 0x01
 556:	82 83       	std	Z+2, r24	; 0x02
 558:	93 83       	std	Z+3, r25	; 0x03
 55a:	a0 cf       	rjmp	.-192    	; 0x49c <main+0x56>

0000055c <__vector_119>:
} // WriteByte_F0 

/*  \brief  ISR for receiving bytes from UARTF0.
 *          It puts the received byte in the RX buffer
 */
ISR(USARTF0_RXC_vect) {
 55c:	1f 92       	push	r1
 55e:	0f 92       	push	r0
 560:	0f b6       	in	r0, 0x3f	; 63
 562:	0f 92       	push	r0
 564:	11 24       	eor	r1, r1
 566:	0b b6       	in	r0, 0x3b	; 59
 568:	0f 92       	push	r0
 56a:	8f 93       	push	r24
 56c:	9f 93       	push	r25
 56e:	ef 93       	push	r30
 570:	ff 93       	push	r31
	
	uint8_t curSlot, nextSlot;
	
	curSlot = rx_f0_wridx;
 572:	80 91 6e 20 	lds	r24, 0x206E	; 0x80206e <rx_f0_wridx>
	rx_f0_buf[curSlot] = USARTF0.DATA;
 576:	e8 2f       	mov	r30, r24
 578:	f0 e0       	ldi	r31, 0x00	; 0
 57a:	90 91 a0 0b 	lds	r25, 0x0BA0	; 0x800ba0 <__TEXT_REGION_LENGTH__+0x700ba0>
 57e:	e7 5f       	subi	r30, 0xF7	; 247
 580:	ff 4d       	sbci	r31, 0xDF	; 223
 582:	90 83       	st	Z, r25
	
	nextSlot = curSlot + 1;
 584:	8f 5f       	subi	r24, 0xFF	; 255
	if(nextSlot >= RXBUF_DEPTH_F0)
 586:	84 36       	cpi	r24, 0x64	; 100
 588:	08 f0       	brcs	.+2      	; 0x58c <__vector_119+0x30>
	nextSlot = 0;
 58a:	80 e0       	ldi	r24, 0x00	; 0
	
	if(nextSlot != rx_f0_rdidx)
 58c:	90 91 6d 20 	lds	r25, 0x206D	; 0x80206d <rx_f0_rdidx>
 590:	89 13       	cpse	r24, r25
	rx_f0_wridx = nextSlot;
 592:	80 93 6e 20 	sts	0x206E, r24	; 0x80206e <rx_f0_wridx>
	
} // ISR(USARTF0_RXC_vect)
 596:	ff 91       	pop	r31
 598:	ef 91       	pop	r30
 59a:	9f 91       	pop	r25
 59c:	8f 91       	pop	r24
 59e:	0f 90       	pop	r0
 5a0:	0b be       	out	0x3b, r0	; 59
 5a2:	0f 90       	pop	r0
 5a4:	0f be       	out	0x3f, r0	; 63
 5a6:	0f 90       	pop	r0
 5a8:	1f 90       	pop	r1
 5aa:	18 95       	reti

000005ac <__vector_120>:


/*  \brief  ISR for transmitting bytes to UARTF0.
 *          If there is a byte to send in the TX buffer, it will be send
 */
ISR(USARTF0_DRE_vect) {
 5ac:	1f 92       	push	r1
 5ae:	0f 92       	push	r0
 5b0:	0f b6       	in	r0, 0x3f	; 63
 5b2:	0f 92       	push	r0
 5b4:	11 24       	eor	r1, r1
 5b6:	0b b6       	in	r0, 0x3b	; 59
 5b8:	0f 92       	push	r0
 5ba:	2f 93       	push	r18
 5bc:	8f 93       	push	r24
 5be:	9f 93       	push	r25
 5c0:	ef 93       	push	r30
 5c2:	ff 93       	push	r31
	
	uint8_t curSlot, nextSlot, lastSlot;
	
	nextSlot = curSlot = tx_f0_rdidx;
 5c4:	80 91 d3 20 	lds	r24, 0x20D3	; 0x8020d3 <tx_f0_rdidx>
	lastSlot = tx_f0_wridx;
 5c8:	90 91 d4 20 	lds	r25, 0x20D4	; 0x8020d4 <tx_f0_wridx>
	
	if(curSlot != lastSlot) {
 5cc:	89 17       	cp	r24, r25
 5ce:	69 f0       	breq	.+26     	; 0x5ea <__vector_120+0x3e>
		USARTF0.DATA = tx_f0_buf[curSlot];
 5d0:	e8 2f       	mov	r30, r24
 5d2:	f0 e0       	ldi	r31, 0x00	; 0
 5d4:	e1 59       	subi	r30, 0x91	; 145
 5d6:	ff 4d       	sbci	r31, 0xDF	; 223
 5d8:	20 81       	ld	r18, Z
 5da:	20 93 a0 0b 	sts	0x0BA0, r18	; 0x800ba0 <__TEXT_REGION_LENGTH__+0x700ba0>
		nextSlot = curSlot + 1;
 5de:	8f 5f       	subi	r24, 0xFF	; 255
		if(nextSlot >= TXBUF_DEPTH_F0)
 5e0:	84 36       	cpi	r24, 0x64	; 100
 5e2:	08 f0       	brcs	.+2      	; 0x5e6 <__vector_120+0x3a>
		nextSlot = 0;
 5e4:	80 e0       	ldi	r24, 0x00	; 0
	}
	if(nextSlot == lastSlot)
 5e6:	89 13       	cpse	r24, r25
 5e8:	04 c0       	rjmp	.+8      	; 0x5f2 <__vector_120+0x46>
	USARTF0.CTRLA = USART_RXCINTLVL_MED_gc | USART_TXCINTLVL_OFF_gc | USART_DREINTLVL_OFF_gc;
 5ea:	80 e2       	ldi	r24, 0x20	; 32
 5ec:	80 93 a3 0b 	sts	0x0BA3, r24	; 0x800ba3 <__TEXT_REGION_LENGTH__+0x700ba3>
 5f0:	89 2f       	mov	r24, r25
	
	tx_f0_rdidx = nextSlot;
 5f2:	80 93 d3 20 	sts	0x20D3, r24	; 0x8020d3 <tx_f0_rdidx>
	
} // ISR(USARTF0_DRE_vect) 
 5f6:	ff 91       	pop	r31
 5f8:	ef 91       	pop	r30
 5fa:	9f 91       	pop	r25
 5fc:	8f 91       	pop	r24
 5fe:	2f 91       	pop	r18
 600:	0f 90       	pop	r0
 602:	0b be       	out	0x3b, r0	; 59
 604:	0f 90       	pop	r0
 606:	0f be       	out	0x3f, r0	; 63
 608:	0f 90       	pop	r0
 60a:	1f 90       	pop	r1
 60c:	18 95       	reti

0000060e <initSoftwareSpi>:
#define F_CPU 2000000UL 
#include <util/delay.h>
#include "SoftSpi.h"

void initSoftwareSpi(void){
	SCLKPORT.DIRSET = SCLKPIN;
 60e:	e0 e6       	ldi	r30, 0x60	; 96
 610:	f6 e0       	ldi	r31, 0x06	; 6
 612:	92 e0       	ldi	r25, 0x02	; 2
 614:	91 83       	std	Z+1, r25	; 0x01
	FSYNCPORT.DIRSET = FSYNCPIN;
 616:	84 e0       	ldi	r24, 0x04	; 4
 618:	81 83       	std	Z+1, r24	; 0x01
	SCLKPORT.OUTSET = SCLKPIN;
 61a:	95 83       	std	Z+5, r25	; 0x05
	FSYNCPORT.OUTSET = FSYNCPIN;
 61c:	85 83       	std	Z+5, r24	; 0x05
	SDATPORT.DIRSET = SDATPIN;
 61e:	81 e0       	ldi	r24, 0x01	; 1
 620:	81 83       	std	Z+1, r24	; 0x01
 622:	08 95       	ret

00000624 <softwareSpiWrite>:
}

void softwareSpiWrite(uint16_t data){
 624:	bc 01       	movw	r22, r24
	FSYNCPORT.OUTCLR = FSYNCPIN;
 626:	84 e0       	ldi	r24, 0x04	; 4
 628:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 62c:	2f e0       	ldi	r18, 0x0F	; 15
 62e:	30 e0       	ldi	r19, 0x00	; 0
	for(uint8_t i = 0; i<16; i++){
		if((data>>(15-i)) & 0x0001) SDATPORT.OUTSET = SDATPIN;
		else SDATPORT.OUTCLR = SDATPIN;
 630:	e0 e6       	ldi	r30, 0x60	; 96
 632:	f6 e0       	ldi	r31, 0x06	; 6
 634:	81 e0       	ldi	r24, 0x01	; 1
		
		SCLKPORT.OUTCLR = SCLKPIN;
 636:	92 e0       	ldi	r25, 0x02	; 2
}

void softwareSpiWrite(uint16_t data){
	FSYNCPORT.OUTCLR = FSYNCPIN;
	for(uint8_t i = 0; i<16; i++){
		if((data>>(15-i)) & 0x0001) SDATPORT.OUTSET = SDATPIN;
 638:	ab 01       	movw	r20, r22
 63a:	02 2e       	mov	r0, r18
 63c:	02 c0       	rjmp	.+4      	; 0x642 <softwareSpiWrite+0x1e>
 63e:	56 95       	lsr	r21
 640:	47 95       	ror	r20
 642:	0a 94       	dec	r0
 644:	e2 f7       	brpl	.-8      	; 0x63e <softwareSpiWrite+0x1a>
 646:	40 ff       	sbrs	r20, 0
 648:	02 c0       	rjmp	.+4      	; 0x64e <softwareSpiWrite+0x2a>
 64a:	85 83       	std	Z+5, r24	; 0x05
 64c:	01 c0       	rjmp	.+2      	; 0x650 <softwareSpiWrite+0x2c>
		else SDATPORT.OUTCLR = SDATPIN;
 64e:	86 83       	std	Z+6, r24	; 0x06
		
		SCLKPORT.OUTCLR = SCLKPIN;
 650:	96 83       	std	Z+6, r25	; 0x06
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 652:	00 c0       	rjmp	.+0      	; 0x654 <softwareSpiWrite+0x30>
		_delay_us(1);
		SCLKPORT.OUTSET = SCLKPIN;
 654:	95 83       	std	Z+5, r25	; 0x05
 656:	21 50       	subi	r18, 0x01	; 1
 658:	31 09       	sbc	r19, r1
 65a:	70 f7       	brcc	.-36     	; 0x638 <softwareSpiWrite+0x14>
	}
	FSYNCPORT.OUTSET = FSYNCPIN;
 65c:	84 e0       	ldi	r24, 0x04	; 4
 65e:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
 662:	08 95       	ret

00000664 <__divsf3>:
 664:	0e 94 46 03 	call	0x68c	; 0x68c <__divsf3x>
 668:	0c 94 27 04 	jmp	0x84e	; 0x84e <__fp_round>
 66c:	0e 94 20 04 	call	0x840	; 0x840 <__fp_pscB>
 670:	58 f0       	brcs	.+22     	; 0x688 <__divsf3+0x24>
 672:	0e 94 19 04 	call	0x832	; 0x832 <__fp_pscA>
 676:	40 f0       	brcs	.+16     	; 0x688 <__divsf3+0x24>
 678:	29 f4       	brne	.+10     	; 0x684 <__divsf3+0x20>
 67a:	5f 3f       	cpi	r21, 0xFF	; 255
 67c:	29 f0       	breq	.+10     	; 0x688 <__divsf3+0x24>
 67e:	0c 94 10 04 	jmp	0x820	; 0x820 <__fp_inf>
 682:	51 11       	cpse	r21, r1
 684:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__fp_szero>
 688:	0c 94 16 04 	jmp	0x82c	; 0x82c <__fp_nan>

0000068c <__divsf3x>:
 68c:	0e 94 38 04 	call	0x870	; 0x870 <__fp_split3>
 690:	68 f3       	brcs	.-38     	; 0x66c <__divsf3+0x8>

00000692 <__divsf3_pse>:
 692:	99 23       	and	r25, r25
 694:	b1 f3       	breq	.-20     	; 0x682 <__divsf3+0x1e>
 696:	55 23       	and	r21, r21
 698:	91 f3       	breq	.-28     	; 0x67e <__divsf3+0x1a>
 69a:	95 1b       	sub	r25, r21
 69c:	55 0b       	sbc	r21, r21
 69e:	bb 27       	eor	r27, r27
 6a0:	aa 27       	eor	r26, r26
 6a2:	62 17       	cp	r22, r18
 6a4:	73 07       	cpc	r23, r19
 6a6:	84 07       	cpc	r24, r20
 6a8:	38 f0       	brcs	.+14     	; 0x6b8 <__divsf3_pse+0x26>
 6aa:	9f 5f       	subi	r25, 0xFF	; 255
 6ac:	5f 4f       	sbci	r21, 0xFF	; 255
 6ae:	22 0f       	add	r18, r18
 6b0:	33 1f       	adc	r19, r19
 6b2:	44 1f       	adc	r20, r20
 6b4:	aa 1f       	adc	r26, r26
 6b6:	a9 f3       	breq	.-22     	; 0x6a2 <__divsf3_pse+0x10>
 6b8:	35 d0       	rcall	.+106    	; 0x724 <__divsf3_pse+0x92>
 6ba:	0e 2e       	mov	r0, r30
 6bc:	3a f0       	brmi	.+14     	; 0x6cc <__divsf3_pse+0x3a>
 6be:	e0 e8       	ldi	r30, 0x80	; 128
 6c0:	32 d0       	rcall	.+100    	; 0x726 <__divsf3_pse+0x94>
 6c2:	91 50       	subi	r25, 0x01	; 1
 6c4:	50 40       	sbci	r21, 0x00	; 0
 6c6:	e6 95       	lsr	r30
 6c8:	00 1c       	adc	r0, r0
 6ca:	ca f7       	brpl	.-14     	; 0x6be <__divsf3_pse+0x2c>
 6cc:	2b d0       	rcall	.+86     	; 0x724 <__divsf3_pse+0x92>
 6ce:	fe 2f       	mov	r31, r30
 6d0:	29 d0       	rcall	.+82     	; 0x724 <__divsf3_pse+0x92>
 6d2:	66 0f       	add	r22, r22
 6d4:	77 1f       	adc	r23, r23
 6d6:	88 1f       	adc	r24, r24
 6d8:	bb 1f       	adc	r27, r27
 6da:	26 17       	cp	r18, r22
 6dc:	37 07       	cpc	r19, r23
 6de:	48 07       	cpc	r20, r24
 6e0:	ab 07       	cpc	r26, r27
 6e2:	b0 e8       	ldi	r27, 0x80	; 128
 6e4:	09 f0       	breq	.+2      	; 0x6e8 <__divsf3_pse+0x56>
 6e6:	bb 0b       	sbc	r27, r27
 6e8:	80 2d       	mov	r24, r0
 6ea:	bf 01       	movw	r22, r30
 6ec:	ff 27       	eor	r31, r31
 6ee:	93 58       	subi	r25, 0x83	; 131
 6f0:	5f 4f       	sbci	r21, 0xFF	; 255
 6f2:	3a f0       	brmi	.+14     	; 0x702 <__divsf3_pse+0x70>
 6f4:	9e 3f       	cpi	r25, 0xFE	; 254
 6f6:	51 05       	cpc	r21, r1
 6f8:	78 f0       	brcs	.+30     	; 0x718 <__divsf3_pse+0x86>
 6fa:	0c 94 10 04 	jmp	0x820	; 0x820 <__fp_inf>
 6fe:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__fp_szero>
 702:	5f 3f       	cpi	r21, 0xFF	; 255
 704:	e4 f3       	brlt	.-8      	; 0x6fe <__divsf3_pse+0x6c>
 706:	98 3e       	cpi	r25, 0xE8	; 232
 708:	d4 f3       	brlt	.-12     	; 0x6fe <__divsf3_pse+0x6c>
 70a:	86 95       	lsr	r24
 70c:	77 95       	ror	r23
 70e:	67 95       	ror	r22
 710:	b7 95       	ror	r27
 712:	f7 95       	ror	r31
 714:	9f 5f       	subi	r25, 0xFF	; 255
 716:	c9 f7       	brne	.-14     	; 0x70a <__divsf3_pse+0x78>
 718:	88 0f       	add	r24, r24
 71a:	91 1d       	adc	r25, r1
 71c:	96 95       	lsr	r25
 71e:	87 95       	ror	r24
 720:	97 f9       	bld	r25, 7
 722:	08 95       	ret
 724:	e1 e0       	ldi	r30, 0x01	; 1
 726:	66 0f       	add	r22, r22
 728:	77 1f       	adc	r23, r23
 72a:	88 1f       	adc	r24, r24
 72c:	bb 1f       	adc	r27, r27
 72e:	62 17       	cp	r22, r18
 730:	73 07       	cpc	r23, r19
 732:	84 07       	cpc	r24, r20
 734:	ba 07       	cpc	r27, r26
 736:	20 f0       	brcs	.+8      	; 0x740 <__divsf3_pse+0xae>
 738:	62 1b       	sub	r22, r18
 73a:	73 0b       	sbc	r23, r19
 73c:	84 0b       	sbc	r24, r20
 73e:	ba 0b       	sbc	r27, r26
 740:	ee 1f       	adc	r30, r30
 742:	88 f7       	brcc	.-30     	; 0x726 <__divsf3_pse+0x94>
 744:	e0 95       	com	r30
 746:	08 95       	ret

00000748 <__fixunssfsi>:
 748:	0e 94 40 04 	call	0x880	; 0x880 <__fp_splitA>
 74c:	88 f0       	brcs	.+34     	; 0x770 <__fixunssfsi+0x28>
 74e:	9f 57       	subi	r25, 0x7F	; 127
 750:	98 f0       	brcs	.+38     	; 0x778 <__fixunssfsi+0x30>
 752:	b9 2f       	mov	r27, r25
 754:	99 27       	eor	r25, r25
 756:	b7 51       	subi	r27, 0x17	; 23
 758:	b0 f0       	brcs	.+44     	; 0x786 <__fixunssfsi+0x3e>
 75a:	e1 f0       	breq	.+56     	; 0x794 <__fixunssfsi+0x4c>
 75c:	66 0f       	add	r22, r22
 75e:	77 1f       	adc	r23, r23
 760:	88 1f       	adc	r24, r24
 762:	99 1f       	adc	r25, r25
 764:	1a f0       	brmi	.+6      	; 0x76c <__fixunssfsi+0x24>
 766:	ba 95       	dec	r27
 768:	c9 f7       	brne	.-14     	; 0x75c <__fixunssfsi+0x14>
 76a:	14 c0       	rjmp	.+40     	; 0x794 <__fixunssfsi+0x4c>
 76c:	b1 30       	cpi	r27, 0x01	; 1
 76e:	91 f0       	breq	.+36     	; 0x794 <__fixunssfsi+0x4c>
 770:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <__fp_zero>
 774:	b1 e0       	ldi	r27, 0x01	; 1
 776:	08 95       	ret
 778:	0c 94 5a 04 	jmp	0x8b4	; 0x8b4 <__fp_zero>
 77c:	67 2f       	mov	r22, r23
 77e:	78 2f       	mov	r23, r24
 780:	88 27       	eor	r24, r24
 782:	b8 5f       	subi	r27, 0xF8	; 248
 784:	39 f0       	breq	.+14     	; 0x794 <__fixunssfsi+0x4c>
 786:	b9 3f       	cpi	r27, 0xF9	; 249
 788:	cc f3       	brlt	.-14     	; 0x77c <__fixunssfsi+0x34>
 78a:	86 95       	lsr	r24
 78c:	77 95       	ror	r23
 78e:	67 95       	ror	r22
 790:	b3 95       	inc	r27
 792:	d9 f7       	brne	.-10     	; 0x78a <__fixunssfsi+0x42>
 794:	3e f4       	brtc	.+14     	; 0x7a4 <__fixunssfsi+0x5c>
 796:	90 95       	com	r25
 798:	80 95       	com	r24
 79a:	70 95       	com	r23
 79c:	61 95       	neg	r22
 79e:	7f 4f       	sbci	r23, 0xFF	; 255
 7a0:	8f 4f       	sbci	r24, 0xFF	; 255
 7a2:	9f 4f       	sbci	r25, 0xFF	; 255
 7a4:	08 95       	ret

000007a6 <__floatunsisf>:
 7a6:	e8 94       	clt
 7a8:	09 c0       	rjmp	.+18     	; 0x7bc <__floatsisf+0x12>

000007aa <__floatsisf>:
 7aa:	97 fb       	bst	r25, 7
 7ac:	3e f4       	brtc	.+14     	; 0x7bc <__floatsisf+0x12>
 7ae:	90 95       	com	r25
 7b0:	80 95       	com	r24
 7b2:	70 95       	com	r23
 7b4:	61 95       	neg	r22
 7b6:	7f 4f       	sbci	r23, 0xFF	; 255
 7b8:	8f 4f       	sbci	r24, 0xFF	; 255
 7ba:	9f 4f       	sbci	r25, 0xFF	; 255
 7bc:	99 23       	and	r25, r25
 7be:	a9 f0       	breq	.+42     	; 0x7ea <__floatsisf+0x40>
 7c0:	f9 2f       	mov	r31, r25
 7c2:	96 e9       	ldi	r25, 0x96	; 150
 7c4:	bb 27       	eor	r27, r27
 7c6:	93 95       	inc	r25
 7c8:	f6 95       	lsr	r31
 7ca:	87 95       	ror	r24
 7cc:	77 95       	ror	r23
 7ce:	67 95       	ror	r22
 7d0:	b7 95       	ror	r27
 7d2:	f1 11       	cpse	r31, r1
 7d4:	f8 cf       	rjmp	.-16     	; 0x7c6 <__floatsisf+0x1c>
 7d6:	fa f4       	brpl	.+62     	; 0x816 <__floatsisf+0x6c>
 7d8:	bb 0f       	add	r27, r27
 7da:	11 f4       	brne	.+4      	; 0x7e0 <__floatsisf+0x36>
 7dc:	60 ff       	sbrs	r22, 0
 7de:	1b c0       	rjmp	.+54     	; 0x816 <__floatsisf+0x6c>
 7e0:	6f 5f       	subi	r22, 0xFF	; 255
 7e2:	7f 4f       	sbci	r23, 0xFF	; 255
 7e4:	8f 4f       	sbci	r24, 0xFF	; 255
 7e6:	9f 4f       	sbci	r25, 0xFF	; 255
 7e8:	16 c0       	rjmp	.+44     	; 0x816 <__floatsisf+0x6c>
 7ea:	88 23       	and	r24, r24
 7ec:	11 f0       	breq	.+4      	; 0x7f2 <__floatsisf+0x48>
 7ee:	96 e9       	ldi	r25, 0x96	; 150
 7f0:	11 c0       	rjmp	.+34     	; 0x814 <__floatsisf+0x6a>
 7f2:	77 23       	and	r23, r23
 7f4:	21 f0       	breq	.+8      	; 0x7fe <__floatsisf+0x54>
 7f6:	9e e8       	ldi	r25, 0x8E	; 142
 7f8:	87 2f       	mov	r24, r23
 7fa:	76 2f       	mov	r23, r22
 7fc:	05 c0       	rjmp	.+10     	; 0x808 <__floatsisf+0x5e>
 7fe:	66 23       	and	r22, r22
 800:	71 f0       	breq	.+28     	; 0x81e <__floatsisf+0x74>
 802:	96 e8       	ldi	r25, 0x86	; 134
 804:	86 2f       	mov	r24, r22
 806:	70 e0       	ldi	r23, 0x00	; 0
 808:	60 e0       	ldi	r22, 0x00	; 0
 80a:	2a f0       	brmi	.+10     	; 0x816 <__floatsisf+0x6c>
 80c:	9a 95       	dec	r25
 80e:	66 0f       	add	r22, r22
 810:	77 1f       	adc	r23, r23
 812:	88 1f       	adc	r24, r24
 814:	da f7       	brpl	.-10     	; 0x80c <__floatsisf+0x62>
 816:	88 0f       	add	r24, r24
 818:	96 95       	lsr	r25
 81a:	87 95       	ror	r24
 81c:	97 f9       	bld	r25, 7
 81e:	08 95       	ret

00000820 <__fp_inf>:
 820:	97 f9       	bld	r25, 7
 822:	9f 67       	ori	r25, 0x7F	; 127
 824:	80 e8       	ldi	r24, 0x80	; 128
 826:	70 e0       	ldi	r23, 0x00	; 0
 828:	60 e0       	ldi	r22, 0x00	; 0
 82a:	08 95       	ret

0000082c <__fp_nan>:
 82c:	9f ef       	ldi	r25, 0xFF	; 255
 82e:	80 ec       	ldi	r24, 0xC0	; 192
 830:	08 95       	ret

00000832 <__fp_pscA>:
 832:	00 24       	eor	r0, r0
 834:	0a 94       	dec	r0
 836:	16 16       	cp	r1, r22
 838:	17 06       	cpc	r1, r23
 83a:	18 06       	cpc	r1, r24
 83c:	09 06       	cpc	r0, r25
 83e:	08 95       	ret

00000840 <__fp_pscB>:
 840:	00 24       	eor	r0, r0
 842:	0a 94       	dec	r0
 844:	12 16       	cp	r1, r18
 846:	13 06       	cpc	r1, r19
 848:	14 06       	cpc	r1, r20
 84a:	05 06       	cpc	r0, r21
 84c:	08 95       	ret

0000084e <__fp_round>:
 84e:	09 2e       	mov	r0, r25
 850:	03 94       	inc	r0
 852:	00 0c       	add	r0, r0
 854:	11 f4       	brne	.+4      	; 0x85a <__fp_round+0xc>
 856:	88 23       	and	r24, r24
 858:	52 f0       	brmi	.+20     	; 0x86e <__fp_round+0x20>
 85a:	bb 0f       	add	r27, r27
 85c:	40 f4       	brcc	.+16     	; 0x86e <__fp_round+0x20>
 85e:	bf 2b       	or	r27, r31
 860:	11 f4       	brne	.+4      	; 0x866 <__fp_round+0x18>
 862:	60 ff       	sbrs	r22, 0
 864:	04 c0       	rjmp	.+8      	; 0x86e <__fp_round+0x20>
 866:	6f 5f       	subi	r22, 0xFF	; 255
 868:	7f 4f       	sbci	r23, 0xFF	; 255
 86a:	8f 4f       	sbci	r24, 0xFF	; 255
 86c:	9f 4f       	sbci	r25, 0xFF	; 255
 86e:	08 95       	ret

00000870 <__fp_split3>:
 870:	57 fd       	sbrc	r21, 7
 872:	90 58       	subi	r25, 0x80	; 128
 874:	44 0f       	add	r20, r20
 876:	55 1f       	adc	r21, r21
 878:	59 f0       	breq	.+22     	; 0x890 <__fp_splitA+0x10>
 87a:	5f 3f       	cpi	r21, 0xFF	; 255
 87c:	71 f0       	breq	.+28     	; 0x89a <__fp_splitA+0x1a>
 87e:	47 95       	ror	r20

00000880 <__fp_splitA>:
 880:	88 0f       	add	r24, r24
 882:	97 fb       	bst	r25, 7
 884:	99 1f       	adc	r25, r25
 886:	61 f0       	breq	.+24     	; 0x8a0 <__fp_splitA+0x20>
 888:	9f 3f       	cpi	r25, 0xFF	; 255
 88a:	79 f0       	breq	.+30     	; 0x8aa <__fp_splitA+0x2a>
 88c:	87 95       	ror	r24
 88e:	08 95       	ret
 890:	12 16       	cp	r1, r18
 892:	13 06       	cpc	r1, r19
 894:	14 06       	cpc	r1, r20
 896:	55 1f       	adc	r21, r21
 898:	f2 cf       	rjmp	.-28     	; 0x87e <__fp_split3+0xe>
 89a:	46 95       	lsr	r20
 89c:	f1 df       	rcall	.-30     	; 0x880 <__fp_splitA>
 89e:	08 c0       	rjmp	.+16     	; 0x8b0 <__fp_splitA+0x30>
 8a0:	16 16       	cp	r1, r22
 8a2:	17 06       	cpc	r1, r23
 8a4:	18 06       	cpc	r1, r24
 8a6:	99 1f       	adc	r25, r25
 8a8:	f1 cf       	rjmp	.-30     	; 0x88c <__fp_splitA+0xc>
 8aa:	86 95       	lsr	r24
 8ac:	71 05       	cpc	r23, r1
 8ae:	61 05       	cpc	r22, r1
 8b0:	08 94       	sec
 8b2:	08 95       	ret

000008b4 <__fp_zero>:
 8b4:	e8 94       	clt

000008b6 <__fp_szero>:
 8b6:	bb 27       	eor	r27, r27
 8b8:	66 27       	eor	r22, r22
 8ba:	77 27       	eor	r23, r23
 8bc:	cb 01       	movw	r24, r22
 8be:	97 f9       	bld	r25, 7
 8c0:	08 95       	ret

000008c2 <__umulhisi3>:
 8c2:	a2 9f       	mul	r26, r18
 8c4:	b0 01       	movw	r22, r0
 8c6:	b3 9f       	mul	r27, r19
 8c8:	c0 01       	movw	r24, r0
 8ca:	a3 9f       	mul	r26, r19
 8cc:	70 0d       	add	r23, r0
 8ce:	81 1d       	adc	r24, r1
 8d0:	11 24       	eor	r1, r1
 8d2:	91 1d       	adc	r25, r1
 8d4:	b2 9f       	mul	r27, r18
 8d6:	70 0d       	add	r23, r0
 8d8:	81 1d       	adc	r24, r1
 8da:	11 24       	eor	r1, r1
 8dc:	91 1d       	adc	r25, r1
 8de:	08 95       	ret

000008e0 <__umulsidi3>:
 8e0:	e8 94       	clt

000008e2 <__umulsidi3_helper>:
 8e2:	df 93       	push	r29
 8e4:	cf 93       	push	r28
 8e6:	fc 01       	movw	r30, r24
 8e8:	db 01       	movw	r26, r22
 8ea:	0e 94 61 04 	call	0x8c2	; 0x8c2 <__umulhisi3>
 8ee:	7f 93       	push	r23
 8f0:	6f 93       	push	r22
 8f2:	e9 01       	movw	r28, r18
 8f4:	9a 01       	movw	r18, r20
 8f6:	ac 01       	movw	r20, r24
 8f8:	bf 93       	push	r27
 8fa:	af 93       	push	r26
 8fc:	3f 93       	push	r19
 8fe:	2f 93       	push	r18
 900:	df 01       	movw	r26, r30
 902:	0e 94 61 04 	call	0x8c2	; 0x8c2 <__umulhisi3>
 906:	26 f4       	brtc	.+8      	; 0x910 <__umulsidi3_helper+0x2e>
 908:	6c 1b       	sub	r22, r28
 90a:	7d 0b       	sbc	r23, r29
 90c:	82 0b       	sbc	r24, r18
 90e:	93 0b       	sbc	r25, r19
 910:	9e 01       	movw	r18, r28
 912:	eb 01       	movw	r28, r22
 914:	fc 01       	movw	r30, r24
 916:	0e 94 b9 04 	call	0x972	; 0x972 <__muldi3_6>
 91a:	af 91       	pop	r26
 91c:	bf 91       	pop	r27
 91e:	2f 91       	pop	r18
 920:	3f 91       	pop	r19
 922:	0e 94 b9 04 	call	0x972	; 0x972 <__muldi3_6>
 926:	be 01       	movw	r22, r28
 928:	cf 01       	movw	r24, r30
 92a:	f9 01       	movw	r30, r18
 92c:	2f 91       	pop	r18
 92e:	3f 91       	pop	r19
 930:	cf 91       	pop	r28
 932:	df 91       	pop	r29
 934:	08 95       	ret

00000936 <__ashrdi3>:
 936:	97 fb       	bst	r25, 7
 938:	10 f8       	bld	r1, 0

0000093a <__lshrdi3>:
 93a:	16 94       	lsr	r1
 93c:	00 08       	sbc	r0, r0
 93e:	0f 93       	push	r16
 940:	08 30       	cpi	r16, 0x08	; 8
 942:	98 f0       	brcs	.+38     	; 0x96a <__lshrdi3+0x30>
 944:	08 50       	subi	r16, 0x08	; 8
 946:	23 2f       	mov	r18, r19
 948:	34 2f       	mov	r19, r20
 94a:	45 2f       	mov	r20, r21
 94c:	56 2f       	mov	r21, r22
 94e:	67 2f       	mov	r22, r23
 950:	78 2f       	mov	r23, r24
 952:	89 2f       	mov	r24, r25
 954:	90 2d       	mov	r25, r0
 956:	f4 cf       	rjmp	.-24     	; 0x940 <__lshrdi3+0x6>
 958:	05 94       	asr	r0
 95a:	97 95       	ror	r25
 95c:	87 95       	ror	r24
 95e:	77 95       	ror	r23
 960:	67 95       	ror	r22
 962:	57 95       	ror	r21
 964:	47 95       	ror	r20
 966:	37 95       	ror	r19
 968:	27 95       	ror	r18
 96a:	0a 95       	dec	r16
 96c:	aa f7       	brpl	.-22     	; 0x958 <__lshrdi3+0x1e>
 96e:	0f 91       	pop	r16
 970:	08 95       	ret

00000972 <__muldi3_6>:
 972:	0e 94 61 04 	call	0x8c2	; 0x8c2 <__umulhisi3>
 976:	46 0f       	add	r20, r22
 978:	57 1f       	adc	r21, r23
 97a:	c8 1f       	adc	r28, r24
 97c:	d9 1f       	adc	r29, r25
 97e:	08 f4       	brcc	.+2      	; 0x982 <__muldi3_6+0x10>
 980:	31 96       	adiw	r30, 0x01	; 1
 982:	08 95       	ret

00000984 <_exit>:
 984:	f8 94       	cli

00000986 <__stop_program>:
 986:	ff cf       	rjmp	.-2      	; 0x986 <__stop_program>
